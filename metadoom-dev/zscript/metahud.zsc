/*
----------------------------
MetaDoom
ZScript Definitions
Status Bar
----------------------------
*/

// The HUD! ZScript edition. ZScript HUDs are also nasty, but they're mostly a
// kind of nasty I can deal with. This port wasn't TOO troublesome, probably
// because I got most of the profanity out of the way during JPF.

class MetaDoomStatusBar : BaseStatusBar
{
	HUDFont mHUDFont;
	HUDFont mIndexFont;
	HUDFont mAmountFont;
	InventoryBarState diparms;
	HUDFont mSmallFont;
	HUDFont mSmallFont2;
	
	// You need a DynamicValueInterpolator for any value that you want to have interpolated
	DynamicValueInterpolator mHealthInterpolator;
	DynamicValueInterpolator mArmorInterpolator;
	DynamicValueInterpolator mScoreInterpolator;
	DynamicValueInterpolator mAmmoInterpolator;
	
	// Things for the Powerup bar system.
	static const string powerupStuff[] =
	{
		//Name of Powerup Giver - Powerup Icon
		"MetaHasteSphere","POWRPINS",
		"MetaRadSuit","POWRSUIT",
		"MetaLightAmp","POWRLAMP",
		"MetaBerserkTimer","POWRBZRK",
		"MetaQuadDamage","POWRQUAD",
		"BufferLineDONOTEDIT","POWRFART" //This line has to be here for things to work
	};
	int barArraySize; //amount of 'columns' that the array has
	int barArrayColumns; //size of the array divided by the columns
	

	override void Init()
	{
		Super.Init();
		SetSize(32, 320, 200);

		// Create the fonts used for the HUD
		Font fnt = "HUDFONT_DOOM";
		mHUDFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true, 1, 1);
		fnt = "INDEXFONT_DOOM";
		mIndexFont = HUDFont.Create(fnt, fnt.GetCharWidth("0"), true);
		mAmountFont = HUDFont.Create("INDEXFONT");
		//diparms = InventoryBarState.Create();
		diparms = InventoryBarState.Create(mIndexfont, Font.CR_UNTRANSLATED, 1.0, "ARTIBOX", "INVCURS");
		
		mSmallFont = HUDFont.Create("SMALLFONT");
		mSmallFont2 = HUDFont.Create("SMALLFONT2");
		
		// More Powerup Bar Shit
		barArrayColumns = 2;
		barArraySize = powerupStuff.Size()/barArrayColumns;
		
		// Initialize the interpolation variables
		mHealthInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 32);
		mArmorInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 32);
		mScoreInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 64000);
		mAmmoInterpolator = DynamicValueInterpolator.Create(0, 0.25, 1, 32);
	}

	// What happens when a new game begins
	override void NewGame ()
	{
		// Run the parent status bar's NewGame() function
		Super.NewGame();

		// Reset any interpolators that you declared
		mHealthInterpolator.Reset(0);
		mArmorInterpolator.Reset(0);
		mScoreInterpolator.Reset(0);
		mAmmoInterpolator.Reset(0);
	}
	
	// What needs to run every tick
	override void Tick()
	{
		// Run the parent status bar's Tick() function
		Super.Tick();

		// Update the value of the interpolators
		mHealthInterpolator.Update(CPlayer.health); // Set the interpolator's value to this player's health
		mArmorInterpolator.Update(GetArmorAmount());
		mScoreInterpolator.Update(players[consoleplayer].mo.score);
		Ammo ammo1, ammo2;
		int ammomax;
		int ammocount1, ammocount2;
		[ammo1, ammo2, ammocount1, ammocount2] = GetCurrentAmmo();
		mAmmoInterpolator.Update(ammocount1);
	}

	override void Draw (int state, double TicFrac)
	{
		Super.Draw (state, TicFrac);
		
		if (state == HUD_StatusBar || automapactive)
		{
			DrawImage("HUDBACK", (0, 168), DI_ITEM_OFFSETS);
			
			// Stretching/tiling the backdrop for widescreen users.
			int x1 = 0;
			int x2 = 0;
			for ( int i = 1; i < 6; i++ )
			{
				x1 = x1 - 320;
				x2 = x2 + 320;
				
				DrawImage("HUDBACK", (x1, 168), DI_ITEM_OFFSETS);
				DrawImage("HUDBACK", (x2, 168), DI_ITEM_OFFSETS);
			}
		}
		
		if (state == HUD_StatusBar)
		{
			BeginStatusBar();
			DrawMainBar (TicFrac);
		} else if (state == HUD_Fullscreen)	{
			BeginStatusBar();
			DrawMainBar (TicFrac);
		} else if (state == HUD_AltHud) {
			BeginStatusBar();
			DrawAltBar (TicFrac);
		}
	}

	protected void DrawMainBar (double TicFrac)
	{
		if (!CheckInventory("DisableHUD", 1))
		{
			// Everything's a seperate method for sanity's sake.
			// This made sense at the time, I assure you.
			DrawScore();
			DrawHealth();
			DrawArmor();
			DrawKeys();
			DrawAmmo();
			DrawReserve();
			DrawStats();
			DrawFaceBox();
			DrawItemBox();
			DrawPowerupBars();
		}
	}

	// Extremely cut down version of the HUD for weirdo althud-havers
	protected void DrawAltBar (double TicFrac)
	{
		if (!CheckInventory("DisableHUD", 1))
		{
			DrawPowerupBars();
		}
	}
	
	void DrawScore()
	{
		// Draw frags in Deathmatch, score if not.
		if (deathmatch || teamplay)
		{
			DrawImage("FGICON", (27, 171), DI_ITEM_OFFSETS);
			DrawString(mSmallFont2, FormatNumber(CPlayer.FragCount, 3), (89, 172), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, Font.CR_RED);
		} else {
			DrawString(mSmallFont2, FormatNumber(mScoreInterpolator.GetValue(), 10), (89, 172),
			DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT|FNF_FILLZEROS, Font.CR_WHITE);
		}
	}
	
	void DrawHealth()
	{
		DrawImage("HPICON", (27, 189), DI_ITEM_OFFSETS);
		DrawString(mSmallFont2, FormatNumber(CPlayer.health, 3), (24, 189), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE);
		DrawImage("HUDBAR", (36, 189), DI_ITEM_OFFSETS);
		DrawBar("LIFEBAR", "MTBAR", mHealthInterpolator.GetValue(), CPlayer.mo.GetMaxHealth(false), (37, 190), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		if (mHealthInterpolator.GetValue() > 100)
		{
			DrawBar("LIFEBAR2", "MTBAR3", mHealthInterpolator.GetValue() - 100, CPlayer.mo.GetMaxHealth(true),
			(37, 190), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		}
		
		// special powerup timer for invuln sphere
		if (CheckInventory("PowerMetaInvulnerable", 1))
		{
			int itemTimeLeft, itemDuration;
			[itemTimeLeft,itemDuration] = CPlayer.mo.GetEffectTicsForItem("MetaInvulnerabilitySphere");
			
			DrawImage("POWRINV", (26, 188), DI_ITEM_OFFSETS);			
			DrawBar("POWRBAR", "MTBAR3", itemTimeLeft, itemDuration, (37, 190), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		}
	}
	
	void DrawArmor()
	{
		if (GetArmorSavePercent() == 50)
		{
			DrawImage("AP2ICON", (27, 180), DI_ITEM_OFFSETS);
		} else {
			DrawImage("APICON", (27, 180), DI_ITEM_OFFSETS);
		}
		DrawString(mSmallFont2, FormatNumber(GetArmorAmount(), 3), (24, 180), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_RIGHT, Font.CR_WHITE);
		
		DrawImage("HUDBAR", (36, 180), DI_ITEM_OFFSETS);
		DrawBar("ARMRBAR", "MTBAR", mArmorInterpolator.GetValue(), 100, (37, 181), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		if (mArmorInterpolator.GetValue() > 100)
		{
			DrawBar("ARMRBAR2", "MTBAR3", (mArmorInterpolator.GetValue() - 100), 100, (37, 181), 0, SHADER_HORZ, DI_ITEM_OFFSETS);
		}
	}
	
	void DrawKeys()
	{
		if (screenblocks < 11 || automapactive)
		{
			DrawImage("HUDKEYS", (281, 170), DI_ITEM_OFFSETS);
		}
		// This looks messy, but TBH this is basically the same code as the
		// default Doom HUD with the positions changed. Funny how that works.
		bool locks[6];
		String image;
		for(int i = 0; i < 6; i++) locks[i] = CPlayer.mo.CheckKeys(i + 1, false, true);
		// key 1
		if (locks[1] && locks[4]) image = "STKEYS6";
		else if (locks[1]) image = "STKEYS0";
		else if (locks[4]) image = "STKEYS3";
		DrawImage(image, (283, 171), DI_ITEM_OFFSETS);
		// key 2
		if (locks[2] && locks[5]) image = "STKEYS7";
		else if (locks[2]) image = "STKEYS1";
		else if (locks[5]) image = "STKEYS4";
		else image = "";
		DrawImage(image, (295, 171), DI_ITEM_OFFSETS);
		// key 3
		if (locks[0] && locks[3]) image = "STKEYS8";
		else if (locks[0]) image = "STKEYS2";
		else if (locks[3]) image = "STKEYS5";
		else image = "";
		DrawImage(image, (307, 171), DI_ITEM_OFFSETS);
	}
	
	void DrawAmmo()
	{
		if (CheckWeaponSelected("MetaPistol") && meta_pistolammo == 0)
		{
			DrawImage("AMICNBAT", (283, 180), DI_ITEM_OFFSETS);
		} else if (CPlayer.ReadyWeapon.Ammo1 is "Shell")
		{
			DrawImage("AMICNSHL", (283, 180), DI_ITEM_OFFSETS);
		} else if (CPlayer.ReadyWeapon.Ammo1 is "RocketAmmo")
		{
			DrawImage("AMICNRCK", (283, 180), DI_ITEM_OFFSETS);
		} else if (CPlayer.ReadyWeapon.Ammo1 is "Cell")
		{
			DrawImage("AMICNPLS", (283, 180), DI_ITEM_OFFSETS);
		} else if (CPlayer.ReadyWeapon.Ammo1 is "HolyWater")
		{
			DrawImage("AMICNWAT", (283, 180), DI_ITEM_OFFSETS);
		} else if (CPlayer.ReadyWeapon.Ammo1 is "HalonCannister")
		{
			DrawImage("AMICNEXT", (283, 180), DI_ITEM_OFFSETS);
		} else if (CPlayer.ReadyWeapon.Ammo1 is "BFGAmmo")
		{
			DrawImage("AMICNBFG", (283, 180), DI_ITEM_OFFSETS);
		} else if (CPlayer.ReadyWeapon.Ammo1 is "SoulAmmo")
		{
			DrawImage("AMICNSOL", (283, 180), DI_ITEM_OFFSETS);
		} else if (CPlayer.ReadyWeapon.Ammo1 is "DogGunHealth")
		{
			DrawImage("HPICON", (283, 180), DI_ITEM_OFFSETS);
		} else if (CPlayer.ReadyWeapon.Ammo1 == null)
		{
			DrawImage("AMICON", (283, 180), DI_ITEM_OFFSETS);
		} else {
			DrawImage("AMICON", (283, 180), DI_ITEM_OFFSETS);
		}
		DrawImage("HUDBAR", (225, 180), DI_ITEM_OFFSETS);
		
		// Draw current ammo amounts
		Ammo ammo1, ammo2;
		int ammomax;
		int ammocount1, ammocount2;
		[ammo1, ammo2, ammocount1, ammocount2] = GetCurrentAmmo();
		
		// Get the maximum ammo of the current weapon, but WITHOUT crashing
		if (ammo1 != NULL)
		{ ammomax = CPlayer.ReadyWeapon.Ammo1.MaxAmount; }
		
		if (ammo1 != null) 
		{
			DrawString(mSmallFont2, FormatNumber(ammocount1, 3), (295, 180), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_LEFT, Font.CR_WHITE);
			DrawBar("AMMOBAR", "MTBAR", mAmmoInterpolator.GetValue(), ammomax, (226, 181), 0, SHADER_REVERSE, DI_ITEM_OFFSETS);
			
		} else {
			if (meta_pistolammo == 1 && CheckWeaponSelected("MetaPistol"))
			{
				DrawString(mSmallFont2, FormatNumber(GetAmount("Clip"), 3), (295, 180), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_LEFT, Font.CR_WHITE);
			} else {
				DrawString(mSmallFont2, "---", (295, 180), DI_ITEM_OFFSETS|DI_TEXT_ALIGN_LEFT, Font.CR_WHITE);
			}
		}
	}
	
	void DrawReserve()
	{
		if (screenblocks < 11 || automapactive)
		{
			DrawImage("HUDAMMO", (225, 170), DI_ITEM_OFFSETS);
		} else {
			DrawImage("HUDAMMO2", (225, 170), DI_ITEM_OFFSETS);
		}
		DrawString(mIndexFont, FormatNumber(GetAmount("Clip"), 3), (246, 191), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(GetAmount("Shell"), 3), (269, 191), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(GetAmount("RocketAmmo"), 3), (292, 191), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(GetAmount("Cell"), 3), (315, 191), DI_TEXT_ALIGN_RIGHT);
		
		DrawString(mIndexFont, FormatNumber(GetAmount("SoulAmmo"), 3), (246, 172), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(GetAmount("BFGAmmo"), 3), (269, 172), DI_TEXT_ALIGN_RIGHT);
	}
	
	void DrawStats()
	{
		if (screenblocks < 11 || automapactive)
		{
			DrawImage("HUDSTAT", (94, 169), DI_ITEM_OFFSETS);
		} else {
			DrawImage("HUDSTAT2", (94, 169), DI_ITEM_OFFSETS);
		}
		
		DrawString(mIndexFont, FormatNumber(level.killed_monsters, 3), (119, 171), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(level.total_monsters, 3), (138, 171), DI_TEXT_ALIGN_RIGHT);
		
		DrawString(mIndexFont, FormatNumber(level.found_items, 3), (119, 181), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(level.total_items, 3), (138, 181), DI_TEXT_ALIGN_RIGHT);
		
		DrawString(mIndexFont, FormatNumber(level.found_secrets, 3), (119, 191), DI_TEXT_ALIGN_RIGHT);
		DrawString(mIndexFont, FormatNumber(level.total_secrets, 3), (138, 191), DI_TEXT_ALIGN_RIGHT);
	}
	
	void DrawFaceBox()
	{
		if (screenblocks < 11 || automapactive)
		{
			DrawImage("HUDBOX", (142, 168), DI_ITEM_OFFSETS);
		}
		
		// Render the Mugshot - some of the data relating to the mugshot
		// (god mode and gib animation defs) are still in SBARINFO because
		// (COMICAL SHRUG GESTURE). So this handles the rest.
		if (cplayer.getgender()==GENDER_FEMALE) // female mugshot
		{
			DrawTexture(GetMugShot(5, MugShot.ANIMATEDGODMODE|Mugshot.XDEATHFACE|MugShot.CUSTOM, "SFF"), (143, 168), DI_ITEM_OFFSETS);
		} else if (cplayer.getgender()==GENDER_NEUTRAL) // neutral mugshot (robot)
		{
			DrawTexture(GetMugShot(5, MugShot.ANIMATEDGODMODE|Mugshot.XDEATHFACE|MugShot.CUSTOM, "STC"), (143, 168), DI_ITEM_OFFSETS);
		} else if (cplayer.getgender()==GENDER_OTHER) // object mugshot... when'd this setting get added?
		{
			DrawTexture(GetMugShot(5, MugShot.ANIMATEDGODMODE|Mugshot.XDEATHFACE|MugShot.CUSTOM, "STC"), (143, 168), DI_ITEM_OFFSETS);
		} else { // fallback - default doomguy
			DrawTexture(GetMugShot(5, MugShot.ANIMATEDGODMODE|Mugshot.XDEATHFACE), (143, 168), DI_ITEM_OFFSETS);
		}
	}
	
	void DrawItemBox()
	{
		if (screenblocks < 11 || automapactive)
		{
			DrawImage("HUDBOX", (184, 168), DI_ITEM_OFFSETS);
		}
		
		// Handle drawing inventory items and the cooldown timer.
		if (CPlayer.mo.InvSel != null && !level.NoInventoryBar)
		{
			static const string invItem[] =
			{
				"HandGrenade",
				"DogCollar",
				"Hologram",
				"KineticMine",
				"ShieldWall",
				"SiphonGrenade",
				"TeslaRocket",
				"Artifact",
				"FlameBelch"
			};

			static const string invCooldownCounter[] =
			{
				"InventoryFuel_HandGrenade",
				"InventoryFuel_DogCollar",
				"InventoryFuel_Hologram",
				"InventoryFuel_KineticMine",
				"InventoryFuel_ShieldWall",
				"InventoryFuel_SiphonGrenade",
				"InventoryFuel_TeslaRocket",
				"InventoryFuel_TheArtifact",
				"InventoryFuel_FlameBelch"
			};

			static const int invCooldownCap[] =
			{
				INV_COOLDOWN_GENERIC,
				INV_COOLDOWN_GENERIC,
				INV_COOLDOWN_HOLOGRAM,
				INV_COOLDOWN_GENERIC,
				INV_COOLDOWN_SHIELD,
				INV_COOLDOWN_SIPHON,
				INV_COOLDOWN_SIPHON,
				INV_COOLDOWN_ARTIFACT,
				INV_COOLDOWN_GENERIC
			};
			
			for(int i = 0; i < invItem.size(); i++)
			{
				// Draw the cooldown timers for the selected item.
				if (CPlayer.mo.InvSel is invItem[i] && GetAmount(invCooldownCounter[i]) < invCooldownCap[i])
				{
					DrawBar("COOLBAR1", "COOLBAR0", GetAmount(invCooldownCounter[i]),
					invCooldownCap[i], (185, 169), 0, SHADER_VERT|SHADER_REVERSE, DI_ITEM_OFFSETS);
				}
				
				// Render the icon half-transparent (greyed out) if we're still
				// under cooldown and unable to spam Cyberdemons to death with
				// Siphon Grenades. Yeah, I know you.
				if (CPlayer.mo.InvSel is invItem[i] && GetAmount(invCooldownCounter[i]) < invCooldownCap[i])
				{
					DrawInventoryIcon(CPlayer.mo.InvSel, (185, 168), DI_ITEM_OFFSETS, 0.5);
				} else if (CPlayer.mo.InvSel is invItem[i] && GetAmount(invCooldownCounter[i]) >= invCooldownCap[i]){
					DrawInventoryIcon(CPlayer.mo.InvSel, (185, 168), DI_ITEM_OFFSETS);
				} else {
					// original inventory item handling, for demon key cheat and non-metadoom inventory items
					DrawInventoryIcon(CPlayer.mo.InvSel, (185, 168), DI_ITEM_OFFSETS);
					if (CPlayer.mo.InvSel.Amount > 1)
					{
						DrawString(mAmountFont, FormatNumber(CPlayer.mo.InvSel.Amount), (219, 199-mIndexFont.mFont.GetHeight()), DI_TEXT_ALIGN_RIGHT, Font.CR_GOLD);
					}
				}
			}
		}
		
		if (isInventoryBarVisible())
		{
			DrawInventoryBar(diparms, (48, 168), 7, DI_ITEM_LEFT_TOP|DI_DRAWCURSORFIRST);
		}
	}
	
	// This is redefined with some minor tweaks to a single line I'll mark down below
	// so as to better position the inventory cursor. Wasteful, huh.
	void DrawInventoryBar(InventoryBarState parms, Vector2 position, int numfields, int flags = 0, double bgalpha = 1.)
	{
		double width = parms.boxsize.X * numfields;
		[position, flags] = AdjustPosition(position, flags, width, parms.boxsize.Y);
		
		CPlayer.mo.InvFirst = ValidateInvFirst(numfields);
		if (CPlayer.mo.InvFirst == null) return;	// Player has no listed inventory items.
		
		Vector2 boxsize = parms.boxsize;
		// First draw all the boxes
		for(int i = 0; i < numfields; i++)
		{
			DrawTexture(parms.box, position + (boxsize.X * i, 0), flags | DI_ITEM_LEFT_TOP, bgalpha);
		}
		
		// now the items and the rest
		
		Vector2 itempos = position + boxsize / 2;
		Vector2 textpos = position + boxsize - (1, 1 + parms.amountfont.mFont.GetHeight());

		int i = 0;
		Inventory item;
		for(item = CPlayer.mo.InvFirst; item != NULL && i < numfields; item = item.NextInv())
		{
			for(int j = 0; j < 2; j++)
			{
				if (j ^ !!(flags & DI_DRAWCURSORFIRST))
				{
					if (item == CPlayer.mo.InvSel)
					{
						double flashAlpha = bgalpha;
						if (flags & DI_ARTIFLASH) flashAlpha *= itemflashFade;
						// This is the one line I changed. Cool.
						DrawTexture(parms.selector, position + parms.selectofs + (boxsize.X * i, 2), flags | DI_ITEM_LEFT_TOP, flashAlpha);
					}
				}
				else
				{
					DrawInventoryIcon(item, itempos + (boxsize.X * i, 0), flags | DI_ITEM_CENTER );
				}
			}
			
			if (parms.amountfont != null && (item.Amount > 1 || (flags & DI_ALWAYSSHOWCOUNTERS)))
			{
				DrawString(parms.amountfont, FormatNumber(item.Amount, 0, 5), textpos + (boxsize.X * i, 0), flags | DI_TEXT_ALIGN_RIGHT, parms.cr, parms.itemalpha);
			}
			i++;
		}
		// Is there something to the left?
		if (CPlayer.mo.FirstInv() != CPlayer.mo.InvFirst)
		{
			DrawTexture(parms.left, position + (-parms.arrowoffset.X, parms.arrowoffset.Y), flags | DI_ITEM_RIGHT|DI_ITEM_VCENTER);
		}
		// Is there something to the right?
		if (item != NULL)
		{
			DrawTexture(parms.right, position + parms.arrowoffset + (width, 0), flags | DI_ITEM_LEFT|DI_ITEM_VCENTER);
		}
	}
	
	// THIS IS ALL A NIGHTMARE. I HAVE NO IDEA WHAT ANY OF THIS DOES. IF YOU
	// WANT TO KNOW WHAT ANY OF THIS IS, ASK THEZOMBIEKILLER AND/OR DRPYSPY.
	void DrawPowerupBars()
	{
		if(!CPlayer.mo) return;

		int iterator   = 0;
		int totalWidth = 0;

		let barTexture = TexMan.CheckForTexture("POWRBAR", TexMan.Type_Any);
		int barWidth, barHeight; [barWidth, barHeight] = TexMan.GetSize(barTexture);

		for(int i = 0; i < barArraySize; i++)
		{
			string powerupClass = powerupStuff[barArrayColumns * i + 0];

			int timeLeft, duration;
			[timeLeft, duration] = CPlayer.mo.GetEffectTicsForItem(powerupClass);

			if(duration <= -1) continue;

			string powerupImage = powerupStuff[barArrayColumns * i + 1];
			let powerupTexture  = TexMan.CheckForTexture(powerupImage, TexMan.Type_Any);

			int width, height; [width, height] = TexMan.GetSize(powerupTexture);

			totalWidth += width + barWidth;
		}

		for(int i = 0; i < barArraySize; i++)
		{
			string powerupClass = powerupStuff[barArrayColumns * i + 0];

			int timeLeft, duration;
			[timeLeft, duration] = CPlayer.mo.GetEffectTicsForItem(powerupClass);

			if(duration <= -1) continue;

			string powerupImage = powerupStuff[barArrayColumns * i + 1];
			let powerupTexture  = TexMan.CheckForTexture(powerupImage, TexMan.Type_Any);

			int width, height; [width, height] = TexMan.GetSize(powerupTexture);

			int distance = 5;
			let origin   = (160 - totalWidth / 2, 0);
			let pos      = origin + ((barWidth + width + distance) * iterator, 165);
			int flags    = /*DI_SCREEN_HCENTER |*/ DI_ITEM_LEFT;

			DrawImage(powerupImage, pos - (width + 1, 0), flags);
			DrawImage("HUDBAR", pos, flags);
			DrawBar("POWRBAR", "MTBAR", timeLeft, duration, pos + (1, -1), 0, SHADER_HORZ, flags);

			iterator++;
		}
	}
}	