/*
----------------------------
MetaDoom
ZScript Definitions
Intermission Screen
----------------------------
*/

// THIS IS A HORRIBLE MESS HACKED TOGETHER THROUGH COPY-PASTE BECAUSE ZSCRIPT IS UNDOCUMENTED AND THE
// ONLY GUY DOCUMENTING IT IS TOO BUSY MAKING VORE MODS TO ACTUALLY DO ANYTHING ABOUT IT
// "This place is not a place of honor... no highly esteemed deed is commemorated here... nothing valued is here.
// What is here is dangerous and repulsive to us. This message is a warning about danger."

class MetaDoomStatusScreen : DoomStatusScreen
{
	// States for single-player
	// This is primarily to fix a bug with advancing the intermission,
	// due to adding an extra state between Secret and Time.
	enum ESPState
	{
		SP_KILLS = 0,
		SP_ITEMS = 2,
		SP_SECRET = 4,
		SP_FRAGS = 6,
		SP_SCORE = 8,
		SP_TIME = 10,
	};
	
	// "Let's do incredibly stupid and ill-advised things!"	
	override void Ticker(void)
	{
		// counter for general background animation
		bcnt++;  
		
		// shut off the music and play a sound effect instead of going straight
		// into the intermission music, because we CAN
		if (bcnt == 1)
		{
			S_ChangeMusic("");
			PlaySound("menu/endmap");
		}
		// start the music a little under a second after entering intermission
		if (bcnt == 24)
		{
			StartMusic();
		}
	
		checkForAccelerate();
		bg.updateAnimatedBack();
	
		switch (CurState)
		{
		case StatCount:
			updateStats();
			break;
		
		case ShowNextLoc:
			updateShowNextLoc();
			break;
		
		case NoState:
			updateNoState();
			break;

		case LeavingIntermission:
			// Hush, GCC.
			break;
		}
	}

	override void Drawer (void)
	{
		switch (CurState)
		{
		case StatCount:
			// draw animated background
			bg.drawBackground(CurState, false, false);
			widescreenDatShit();
			drawStats();
			break;
	
		case ShowNextLoc:
		case LeavingIntermission:
			drawShowNextLoc();
			widescreenDatShit();
			break;

		default:
			drawNoState();
			//widescreenDatShit();
			break;
		}
	}


	int DrawCenterText(int y, PatchInfo pinfo, String stringname)
	{
		String string = Stringtable.Localize(stringname);
		int midx = screen.GetWidth() / 2;

		screen.DrawText(pinfo.mFont, Font.CR_RED, midx - pinfo.mFont.StringWidth(string) * CleanXfac/2, y, string, DTA_CleanNoMove, true);
		return y + pinfo.mFont.GetHeight() * CleanYfac;
	}

	// Draws images to the left and right of the traditional intermission graphic,
	// as a sick hack to fill in space for widescreen players (aka. most players
	// nowadays in this Brutal-tinged era.
	// Rewritten by Gutawer. Kudos!
	void widescreenDatShit ()
    {
        TextureID interborder = TexMan.CheckForTexture("INTBACK", TexMan.Type_MiscPatch);
        Vector2 borderSize = TexMan.GetScaledSize(interborder);
        Vector2 interpicTL, interpicRS;
        [interpicTL, interpicRS] = Screen.VirtualToRealCoords((0, 0), (640, 400), (640, 400));
        screen.DrawTexture (interborder, true, interPicTL.x - borderSize.x * CleanXFac, -64, DTA_CleanNoMove, true);
        screen.DrawTexture (interborder, true, interPicTL.x + interPicRS.x, -64, DTA_CleanNoMove, true);
    }
	
	override void updateStats ()
	{
		if (acceleratestage && sp_state != 12)
		{
			acceleratestage = 0;
			sp_state = 12;
			PlaySound("intermission/nextstage");

			cnt_kills[0] = Plrs[me].skills;
			cnt_items[0] = Plrs[me].sitems;
			cnt_secret[0] = Plrs[me].ssecret;
			cnt_time = Thinker.Tics2Seconds(Plrs[me].stime);
			cnt_par = Thinker.Tics2Seconds(wbs.partime);
			cnt_total_time = Thinker.Tics2Seconds(wbs.totaltime);
		}

		if (sp_state == 2)
		{
			if (intermissioncounter)
			{
				cnt_kills[0] += 2;

				if (!(bcnt&3))
					PlaySound("intermission/tick");
			}
			if (!intermissioncounter || cnt_kills[0] >= Plrs[me].skills)
			{
				cnt_kills[0] = Plrs[me].skills;
				// Play a different sound if you 100%
				if (Plrs[me].skills >= wbs.maxkills)
				{
					PlaySound("intermission/maxkills");
				} else {
					PlaySound("intermission/nextstage");
				}
				sp_state++;
			}
		}
		else if (sp_state == 4)
		{
			if (intermissioncounter)
			{
				cnt_items[0] += 2;

				if (!(bcnt&3))
					PlaySound("intermission/tick");
			}
			if (!intermissioncounter || cnt_items[0] >= Plrs[me].sitems)
			{
				cnt_items[0] = Plrs[me].sitems;
				// Play a different sound if you 100%
				if (Plrs[me].sitems >= wbs.maxitems)
				{
					PlaySound("intermission/maxitems");
				} else {
					PlaySound("intermission/nextstage");
				}
				sp_state++;
			}
		}
		else if (sp_state == 6)
		{
			if (intermissioncounter)
			{
				cnt_secret[0] += 2;

				if (!(bcnt&3))
					PlaySound("intermission/tick");
			}
			if (!intermissioncounter || cnt_secret[0] >= Plrs[me].ssecret)
			{
				cnt_secret[0] = Plrs[me].ssecret;
				// Play a different sound if you 100%
				if (Plrs[me].ssecret >= wbs.maxsecret)
				{
					PlaySound("intermission/maxsecret");
				} else {
					PlaySound("intermission/nextstage");
				}
				sp_state++;
			}
		}
		else if (sp_state == 8)
		{
				// Just play a sound! Let's not bother with counting up the score,
				// it's probably really big, anyway.
				PlaySound("intermission/nextstage");
				sp_state++;
		}
		
		// This bit is largely untouched logic-wise, except for advancing the
		// state number.
		else if (sp_state == 10)
		{
			if (intermissioncounter)
			{
				if (!(bcnt&3))
					PlaySound("intermission/tick");

				cnt_time += 3;
				cnt_par += 3;
				cnt_total_time += 3;
			}

			int sec = Thinker.Tics2Seconds(Plrs[me].stime);
			if (!intermissioncounter || cnt_time >= sec)
				cnt_time = sec;

			int tsec = Thinker.Tics2Seconds(wbs.totaltime);
			if (!intermissioncounter || cnt_total_time >= tsec)
				cnt_total_time = tsec;

			int psec = Thinker.Tics2Seconds(wbs.partime);
			if (!intermissioncounter || cnt_par >= psec)
			{
				cnt_par = psec;

				if (cnt_time >= sec)
				{
					cnt_total_time = tsec;
					PlaySound("intermission/nextstage");
					sp_state++;
				}
			}
		}
		else if (sp_state == 12)
		{
			if (acceleratestage)
			{
				PlaySound("intermission/paststats");
				initShowNextLoc();
			}
		}
		else if (sp_state & 1)
		{
			if (!--cnt_pause)
			{
				sp_state++;
				cnt_pause = Thinker.TICRATE;
			}
		}
	}
	
	override void drawStats (void)
	{
		// line height
		int lh = 20; //IntermissionFont.GetHeight() * 3 / 2;

		drawLF();
	
		screen.DrawText (BigFont, Font.CR_UNTRANSLATED, SP_STATSX, SP_STATSY-3, Stringtable.Localize("$TXT_IMKILLS"), DTA_Clean, true, DTA_Shadow, true);
		screen.DrawText (BigFont, Font.CR_UNTRANSLATED, SP_STATSX, SP_STATSY+lh-3, Stringtable.Localize("$TXT_IMITEMS"), DTA_Clean, true, DTA_Shadow, true);
		screen.DrawText (BigFont, Font.CR_UNTRANSLATED, SP_STATSX, SP_STATSY+2*lh-3, Stringtable.Localize("$TXT_IMSECRETS"), DTA_Clean, true, DTA_Shadow, true);
		screen.DrawText (BigFont, Font.CR_UNTRANSLATED, SP_STATSX, SP_STATSY+3*lh-3, Stringtable.Localize("$TXT_IMSCORE"), DTA_Clean, true, DTA_Shadow, true);

		int countpos = gameinfo.gametype==GAME_Strife? 285:270;
		
		

		if (sp_state >= 2)
		{
			// Draw a golden percentage if you 100%
			if (Plrs[me].skills == wbs.maxkills)
			{
				drawPercent (IntermissionFont, countpos, SP_STATSY, cnt_kills[0], wbs.maxkills, true, Font.CR_GOLD);
			} else {
				drawPercent (IntermissionFont, countpos, SP_STATSY, cnt_kills[0], wbs.maxkills);
			}
		}
		if (sp_state >= 4)
		{
			// Draw a golden percentage if you 100%
			if (Plrs[me].sitems == wbs.maxitems)
			{
				drawPercent (IntermissionFont, countpos, SP_STATSY+lh, cnt_items[0], wbs.maxitems, true, Font.CR_GOLD);
			} else {
				drawPercent (IntermissionFont, countpos, SP_STATSY+lh, cnt_items[0], wbs.maxitems);
			}
		}
		if (sp_state >= 6)
		{
			// Draw a golden percentage if you 100%
			if (Plrs[me].ssecret == wbs.maxsecret)
			{
				drawPercent (IntermissionFont, countpos, SP_STATSY+2*lh, cnt_secret[0], wbs.maxsecret, true, Font.CR_GOLD);
			} else {
				drawPercent (IntermissionFont, countpos, SP_STATSY+2*lh, cnt_secret[0], wbs.maxsecret);
			}
		}
		if (sp_state >= 8)
		{
			drawNum(IntermissionFont, countpos, SP_STATSY+3*lh, players[consoleplayer].mo.score, 0, false, Font.CR_RED);
		}
		if (sp_state >= 10)
		{
			screen.DrawText (BigFont, Font.CR_UNTRANSLATED, SP_TIMEX, SP_TIMEY-4, Stringtable.Localize("$TXT_IMTIME"), DTA_Clean, true, DTA_Shadow, true);
			drawTime (160 - SP_TIMEX, SP_TIMEY, cnt_time);
			
			if (wbs.partime)
			{
				screen.DrawText (BigFont, Font.CR_UNTRANSLATED, 160 + SP_TIMEX, SP_TIMEY-3, Stringtable.Localize("$TXT_IMPAR"), DTA_Clean, true, DTA_Shadow, true);
				drawTime (320 - SP_TIMEX, SP_TIMEY, cnt_par);
			}
			
			if (wi_showtotaltime)
			{
				screen.DrawText (BigFont, Font.CR_UNTRANSLATED, SP_TIMEX, SP_TIMEY+lh-3, Stringtable.Localize("$TXT_IMTOTAL"), DTA_Clean, true, DTA_Shadow, true);
				drawTime (160 - SP_TIMEX, SP_TIMEY + lh, cnt_total_time, true);	// no 'sucks' for total time ever!
			}
		}
	}
}