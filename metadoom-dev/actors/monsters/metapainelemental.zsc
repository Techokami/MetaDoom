/*
----------------------------
MetaDoom
Actor Definitions
Pain Elemental
----------------------------
*/

// The original Meatball Demon, with one new nasty twist - you can no longer
// cockblock it, because it'll bite your face off.

class MetaPainElemental : MonsterCore
{
	Default
	{
		Health 400;
		Radius 31;
		Height 56;
		Mass 400;
		Speed 8;
		PainChance 128;
		Monster;
		+FLOAT
		+NOGRAVITY
		+FLOATBOB
		SeeSound "monsters/painelemental/see";
		PainSound "monsters/painelemental/pain";
		DeathSound "monsters/painelemental/die";
		ActiveSound "monsters/painelemental/idle";
		Obituary "$OB_PAINELEMENTAL";
		Tag "Pain Elemental";
		//$Category "Monsters/MetaDoom/Pain Elemental"
		//$Title "Pain Elemental"
		//$Color 12
	}

	States
	{
	Spawn:
		PAIN A 10 A_Look;
		Loop;
	See:
		PAIN AABBCC 3 A_MetaChase;
		Loop;
	Missile:
		PAIN D 5 A_FaceTarget;
		PAIN E 5 A_FaceTarget;
		PAIN F 5 BRIGHT A_FaceTarget;
		PAIN F 0 BRIGHT A_PainAttack("MetaLostSoul");
		Goto See;
	Melee:
		PAIN D 4 A_FaceTarget;
		PAIN E 4 A_FaceTarget;
		PAIN F 4 BRIGHT A_FaceTarget;
		PAIN F 0 BRIGHT A_CustomMeleeAttack(10, "monsters/painelemental/bite", "monsters/painelemental/bite", "PainElementalBite", 1);
		PAIN E 4 A_FaceTarget;
		Goto See;
	Pain:
		PAIN G 6;
		PAIN G 6 A_Pain;
		Goto See;
	Death:
		PAIN H 0 A_GiveToTarget("ScoreItem", 500);
		TNT1 A 0 A_SpawnItem("SoulSpawner");
		PAIN H 8 BRIGHT { bFLOATBOB = 0; }
		PAIN I 8 BRIGHT A_Scream;
		PAIN JK 8 BRIGHT;
		PAIN L 8 BRIGHT A_PainDie("MetaLostSoul");
		PAIN M 8 BRIGHT;
		Stop;
	Raise:
		PAIN MLKJIH 8;
		Goto See;
	}
}

// This horrible thing fires out Forgotten Ones like a shotgun. I've redone the
// sprites, but I'd still like to revise this a little further at some point.

class MetaBeholder : MonsterCore
{
	Default
	{
		Health 300;
		Radius 31;
		Height 56;
		Mass 400;
		Speed 8;
		PainChance 128;
		Monster;
		+FLOAT
		+NOGRAVITY
		+FLOATBOB
		SeeSound "monsters/beholder/see";
		PainSound "monsters/beholder/pain";
		DeathSound "monsters/beholder/die";
		ActiveSound "monsters/painelemental/idle";
		Obituary "$OB_BEHOLDER";
		Tag "Beholder";
		//$Category "Monsters/MetaDoom/Pain Elemental"
		//$Title "Beholder"
		//$Color 12
	}

	States
	{
	Spawn:
		BEHO Z 10 A_Look;
		Loop;
	See:
		"####" A 0 
		{
			// if too close to the ground, punt the wretched up in the air
			// slightly to avoid FLOATBOB ugliness
			if (pos.z <= (floorz + 16))
			{
				ThrustThingZ(0,2,0,0);
			}
		}
		BEHO AACCBBDD 3 A_MetaChase;
		BEHO AACCBBDD 3 A_MetaChase("Melee", null);
		Loop;
	Missile:
		BEHO E 0 A_PlaySound("monsters/beholder/fire");
		BEHO E 5 A_FaceTarget;
		BEHO F 5 A_FaceTarget;
		BEHO G 5 BRIGHT
		{
			A_FaceTarget();
			
			for (int i = -40; i < 40; i = i + 8)
			{
				A_BeholderShootSkull("MetaForgottenOne", angle + i, 0, 0);
			}
		}
		BEHO H 5 BRIGHT A_FaceTarget;
		BEHO I 5 A_FaceTarget;
		BEHO Z 10;
		Goto See;
	Melee:
		BEHO J 4 A_FaceTarget;
		BEHO K 4 A_FaceTarget;
		BEHO L 4 A_CustomMeleeAttack(10, "monsters/painelemental/bite", "monsters/painelemental/bite", "PainElementalBite", 1);
		BEHO Z 4 A_FaceTarget;
		Goto See;
	Pain:
		BEHO M 3;
		BEHO M 3 A_Pain;
		BEHO M 6;
		Goto See;
	Death:
		BEHO N 0 
		{
			A_GiveToTarget("ScoreItem", 500);
			A_SpawnItem("SoulSpawner");
			A_KillChildren();
			bFLOATBOB = 0;
		}
		BEHO N 8 BRIGHT;
		BEHO O 8 BRIGHT A_Scream;
		BEHO P 8 BRIGHT;
		BEHO Q 8 BRIGHT;
		BEHO RS 8 BRIGHT;
		Stop;
	}
	
	// This is identical to A_PainShootSkull, but with a SINGLE LINE added to
	// set the shooter as the skull's master, so they can get killed on the
	// Beholder's death. The things I do, eh?
	void A_BeholderShootSkull(Class<Actor> spawntype, double angle, int flags = 0, int limit = -1)
	{
		// Don't spawn if we get massacred.
		if (DamageType == 'Massacre') return;

		if (spawntype == null) spawntype = "LostSoul";

		// [RH] check to make sure it's not too close to the ceiling
		if (pos.z + height + 8 > ceilingz)
		{
			if (bFloat)
			{
				Vel.Z -= 2;
				bInFloat = true;
				bVFriction = true;
			}
			return;
		}

		// [RH] make this optional
		if (limit < 0 && (Level.compatflags & COMPATF_LIMITPAIN))
			limit = 21;

		if (limit > 0)
		{
			// count total number of skulls currently on the level
			// if there are already 21 skulls on the level, don't spit another one
			int count = limit;
			ThinkerIterator it = ThinkerIterator.Create(spawntype);
			Thinker othink;

			while ( (othink = it.Next ()) )
			{
				if (--count == 0)
					return;
			}
		}

		// okay, there's room for another one
		double otherradius = GetDefaultByType(spawntype).radius;
		double prestep = 4 + (radius + otherradius) * 1.5;

		Vector2 move = AngleToVector(angle, prestep);
		Vector3 spawnpos = pos + (0,0,8);
		Vector3 destpos = spawnpos + move;

		Actor other = Spawn(spawntype, spawnpos, ALLOW_REPLACE);

		// Now check if the spawn is legal. Unlike Boom's hopeless attempt at fixing it, let's do it the same way
		// P_XYMovement solves the line skipping: Spawn the Lost Soul near the PE's center and then use multiple
		// smaller steps to get it to its intended position. This will also result in proper clipping, but
		// it will avoid all the problems of the Boom method, which checked too many lines that weren't even touched
		// and despite some adjustments never worked with portals.

		if (other != null)
		{
			double maxmove = other.radius - 1;

			if (maxmove <= 0) maxmove = 16;

			double xspeed = abs(move.X);
			double yspeed = abs(move.Y);

			int steps = 1;

			if (xspeed > yspeed)
			{
				if (xspeed > maxmove)
				{
					steps = int(1 + xspeed / maxmove);
				}
			}
			else
			{
				if (yspeed > maxmove)
				{
					steps = int(1 + yspeed / maxmove);
				}
			}

			Vector2 stepmove = move / steps;
			bool savedsolid = bSolid;
			bool savednoteleport = other.bNoTeleport;
			
			// make the PE nonsolid for the check and the LS non-teleporting so that P_TryMove doesn't do unwanted things.
			bSolid = false;
			other.bNoTeleport = true;
			for (int i = 0; i < steps; i++)
			{
				Vector2 ptry = other.pos.xy + stepmove;
				double oldangle = other.angle;
				if (!other.TryMove(ptry, 0))
				{
					// kill it immediately
					other.ClearCounters();
					other.DamageMobj(self, self, TELEFRAG_DAMAGE, 'None');
					bSolid = savedsolid;
					other.bNoTeleport = savednoteleport;
					return;
				}

				if (other.pos.xy != ptry)
				{
					// If the new position does not match the desired position, the player
					// must have gone through a portal.
					// For that we need to adjust the movement vector for the following steps.
					double anglediff = deltaangle(oldangle, other.angle);

					if (anglediff != 0)
					{
						stepmove = RotateVector(stepmove, anglediff);
					}
				}

			}
			bSolid = savedsolid;
			other.bNoTeleport = savednoteleport;

			// [RH] Lost souls hate the same things as their pain elementals
			other.CopyFriendliness (self, !(flags & PAF_NOTARGET));
			other.master = self;

			if (!(flags & PAF_NOSKULLATTACK))
			{
				other.A_SkullAttack();
			}
		}
	}
}

// Rahovart is the Doom 64 Pain Elemental, popping out two Lost Souls at once.
// TODO: Add some interesting disadvantage

class MetaRahovart : MonsterCore
{
	Default
	{
		Health 400;
		Radius 31;
		Height 56;
		Mass 400;
		Speed 8;
		PainChance 128;
		Monster;
		+FLOAT
		+NOGRAVITY
		+FLOATBOB
		SeeSound "monsters/rahovart/see";
		PainSound "monsters/rahovart/pain";
		DeathSound "monsters/rahovart/die";
		ActiveSound "monsters/painelemental/idle";
		Obituary "$OB_RAHOVART";
		Tag "Rahovart";
		//$Category "Monsters/MetaDoom/Pain Elemental"
		//$Title "Rahovart"
		//$Color 12
	}

	States
	{
	Spawn:
		RAHO A 10 A_Look;
		Loop;
	See:
		RAHO AAAAAAAA 3 A_MetaChase;
		Loop;
	Missile:
		RAHO B 5 A_FaceTarget;
		RAHO C 5 A_FaceTarget;
		RAHO D 5 BRIGHT A_DualPainAttack("MetaLostSoul");
		Goto See;
	Melee:
		RAHO A 4 A_FaceTarget;
		RAHO B 4 A_FaceTarget;
		RAHO C 0 BRIGHT A_FaceTarget;
		RAHO C 4 BRIGHT A_CustomMeleeAttack(15, "monsters/painelemental/bite", "monsters/painelemental/bite", "PainElementalBite", 1);
		RAHO A 4 A_FaceTarget;
		Goto See;
	Pain:
		RAHO D 3;
		RAHO D 3 A_Pain;
		RAHO D 6;
		Goto See;
	Death:
		RAHO E 0 A_GiveToTarget("ScoreItem", 500);
		TNT1 A 0 A_SpawnItem("SoulSpawner");
		RAHO E 8 BRIGHT { bFLOATBOB = 0; }
		RAHO F 8 BRIGHT A_Scream;
		RAHO G 8 BRIGHT;
		RAHO H 8 BRIGHT A_PainDie("MetaLostSoul");
		RAHO IJKL 8 BRIGHT;
		Stop;
	}
}