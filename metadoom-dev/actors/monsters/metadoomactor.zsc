/*
----------------------------
MetaDoom
Actor Definitions
Shared Code
----------------------------
*/

// Inventory counters for certain behaviors. One day, I will refactor these
// into user variables. Today is not that day. Tomorrow? Not looking too crash
// hot either, honestly.
class BleedingCounter : Counter { Default { Inventory.MaxAmount 20; } }

// Flags for A_CheckSolidFooting
enum ECheckSolidFootingFlags
{
	CSF_SOLIDGROUND = 1,
	CSF_SOLIDACTORS = 2,
	
	CSF_ALL = CSF_SOLIDGROUND|CSF_SOLIDACTORS,
}

class CheckSolidFooting : Actor
{
	default
	{
		+PUFFONACTORS
		+BLOODLESSIMPACT
		+HITTARGET
		+PAINLESS
		+ALLOWTHRUFLAGS
		+THRUSPECIES
		
		Height 0;
		Species "CheckSolidFooting";
	}
	
	states
	{
		Spawn:
			TNT1 A 0;
			stop;
	}
}

// The base monster actor, from which all monsters are inherited.
	
class MonsterCore : Actor
{
	Default
	{
		painchance "Fist", 255;
		painchance "KrautBoot", 255;
		painchance "Axe", 255;
		painchance "Vampire", 255;
		painchance "LightningStun", 255;
		painchance "Bleeding", 0;
		painchance "LightningGun", 24;
		painchance "SoulCube", 255;
		damagefactor "FireExtinguisher", 0;
		damagefactor "DogCollar", 0;
		damagefactor "LightningStun", 0.1;
		painchance "DogCollar", 0;
		bloodcolor "ff 00 00";
		MonsterCore.CanBeScared true;
	}
	
	// Part of A_CheckLanding
	double oldVel;
	
	// Part of the bleeding code
	int bleedtimer;
	actor bloodletter;
	
	// Part of the Water Pistol code
	int scurredamount;
	int scurredtimer;
	bool CanBeScared;
	property CanBeScared: CanBeScared;
	
	States
	{
	// Holy Water Pistol
	Pain.HolyWater:
		"####" # 0
		{
			if (CanBeScared == true)
			{
				scurredamount = 7;
				scurredtimer = 0;
			}
		}
		"####" # 0 A_Jump(256,"Pain");
		stop;
		
	// Siphon Grenade
	Pain.Vampire:
		"####" # 0 A_GiveToTarget ("Health", 1);
		"####" # 0 A_PlaySound("monsters/vamped");
		"####" # 0 A_Jump(256,"Pain");
		stop;
		
	// Lightning Gun Stun
	Pain.LightningStun:
		"####" # 0 A_PlaySound("monsters/shocked");
		"####" # 0 A_Jump(256,"Pain");
		stop;
		
	// Fire Axe
	Pain.Axe:
		"####" # 0
		{
			A_GiveInventory("BleedingCounter", 4);
			A_MetaPinata("MetaHealthPinata", 3);
			ThrustThing(angle*256/360+128, 8, 1, 0);
		}
		"####" # 0 A_Jump(256,"Pain");
		stop;
	Death.Axe:
		"####" # 0
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			A_MetaPinata("MetaHealthPinata", 5);
		}
		"####" # 0 A_Jump(256,"Death");
		stop;
	XDeath.Axe:
		"####" # 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			A_MetaPinata("MetaHealthPinata", 5);
		}
		"####" # 0 A_Jump(256,"XDeath");
		stop;
	Death.Bleeding:
		"####" # 0
		{
			A_MetaPinata("MetaHealthPinata", 5);
			A_TakeInventory("BleedingCounter", 999);
			bleedtimer = 0;
		}
		"####" # 0 A_Jump(256,"Death");
		stop;
		
	// Fists - Standard
	Pain.Fist:
		"####" # 1;
		"####" # 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			if (self.bNOGRAVITY == false)
			{
				ThrustThingZ(0,32,0,1);
			}
			A_MetaPinata("MetaHealthPinata", 2);
			bFrightened = False;
		}
		"####" # 0 A_Jump(256,"Punched");
		stop;
	Punched: // default for if actor doesn't have punched state
		"####" # 0 A_Jump(256,"Pain");
		stop;
	Death.Fist:
		"####" # 1;
		"####" # 0
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_MetaPinata("MetaHealthPinata", 5);
		}
		"####" # 0 A_Jump(256,"Death");
		stop;
	XDeath.Fist:
		"####" # 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_MetaPinata("MetaHealthPinata", 10);
		}
		"####" # 0 A_Jump(256,"XDeath");
		stop;
		
	// Fists - Berserker
	Pain.BerserkFist:
		"####" # 1;
		"####" # 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 64, 1, 0);
			if (self.bNOGRAVITY == false)
			{
				ThrustThingZ(0,32,0,1);
			}
			A_MetaPinata("MetaHealthPinata", 1);
			bFrightened = False;
		}
		"####" # 0 A_Jump(256,"Pain");
		stop;
	Death.BerserkFist:
		"####" # 1;
		"####" # 0
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 64, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_MetaPinata("MetaHealthPinata", 2);
		}
		"####" # 0 A_Jump(256,"Death");
		stop;
	XDeath.BerserkFist:
		"####" # 1;
		"####" # 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 64, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_MetaPinata("MetaHealthPinata", 3);
		}
		"####" # 0 A_Jump(256,"XDeath");
		stop;
		
	// Wolfenstein Java Kick
	Pain.KrautBoot:
		"####" # 1;
		"####" # 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			if (self.bNOGRAVITY == false)
			{
				ThrustThingZ(0,32,0,1);
			}
			bFrightened = False;
		}
		"####" # 0 A_Jump(256,"Punched");
		stop;
	Death.KrautBoot:
		"####" # 1;
		"####" # 0
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			ThrustThingZ(0,32,0,1);
		}
		"####" # 0 A_Jump(256,"Death");
		stop;
	XDeath.KrautBoot:
		"####" # 1;
		"####" # 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_MetaPinata("MetaHealthPinata", 10);
		}
		"####" # 0 A_Jump(256,"XDeath");
		stop;
		
	// Chainsaw Melee
	Pain.ChainsawMelee:
		"####" # 0 
		{
			A_FaceTarget();
			//ThrustThing(angle*256/360+128, 8, 1, 0);
			if (self.bNOGRAVITY == false)
			{
				ThrustThingZ(0,32,0,1);
			}
			A_MetaPinata("MetaHealthPinata", 1);
			bFrightened = False;
		}
		"####" # 0 A_Jump(256,"Punched");
		stop;
	Death.ChainsawMelee:
		"####" # 0
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 8, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_MetaPinata("MetaHealthPinata", 5);
		}
		"####" # 0 A_Jump(256,"Death");
		stop;
		
	// "kill monsters" cheat, to avoid the framerate exploding
	Death.Massacre:
		"####" # 0 A_Jump(256,"Death");
		stop;
		
	// SoulCube
	Pain.SoulCube:
		"####" # 0
		{
			A_MetaPinata("MetaHealthPinataPerm", 12);
			A_MetaPinata("MetaArmorPinata", 12);
			A_MetaPinata("MetaPinataClip", 12);
			A_MetaPinata("MetaPinataShell", 12);
			A_MetaPinata("MetaPinataRocket", 12);
			A_MetaPinata("MetaPinataCell", 12);
		}
		"####" # 0 A_Jump (256, "Pain");
		stop;
	Death.SoulCube:
	XDeath.SoulCube:
		"####" # 0
		{
			A_MetaPinata("MetaHealthPinataPerm", 12);
			A_MetaPinata("MetaArmorPinata", 12);
			A_MetaPinata("MetaPinataClip", 12);
			A_MetaPinata("MetaPinataShell", 12);
			A_MetaPinata("MetaPinataRocket", 12);
			A_MetaPinata("MetaPinataCell", 12);			
		}
		"####" # 0 A_Jump (256, "XDeath");
		stop;
		
	// General purpose catchall to prevent errors when an actor that doesn't
	// have an XDeath tries to jump to an XDeath
	XDeath:
		"####" # 0 A_Jump (256, "Death");
		stop;
	}

	
	// -----------------------------------------------------------------

	// A_MetaPinata("ActorName", amount)
	// Spews the stated actor out from the caller.
	// Used for the "item pinata" effects
	void A_MetaPinata(class<Actor> spawntype, int spawnamount)
	{
		int pinataCount;
	
		for (pinataCount = spawnamount; pinataCount > 0; pinataCount --)
		{
			A_SpawnItemEx(spawntype,0,0,32,random(0,8),0,random(0,8),random(0,360));
		}
	}
	
	// Do things that should happen every single gametic.
	override void Tick()
	{
		// For A_CheckSolidFooting
		oldVel = vel.z;
		
		// Run status effect-y stuff if monster is alive. These are busted down
		// into seperate functions to make things less hairy.
		if (health > 0)
		{
			DoBleeding();
			DoSpooked();
		}
		
		Super.Tick();
	}
	
	// Handle getting your pants scared off by the Holy Water Pistol.
	// Wrap the chase functions around some code to handle scarediness.
	void A_MetaChase(statelabel melee = '_a_chase_default', statelabel missile = '_a_chase_default', int flags = 0)
	{
		if (scurredamount > 0)
		{
			A_Chase(null, null);
			scurredtimer++;
		} else {
			A_Chase(melee,missile,flags);
		}
	}
	
	void A_MetaVileChase()
	{
		if (scurredamount > 0)
		{
			A_Chase(null, null);
			scurredtimer++;
		} else {
			A_VileChase();
		}
	}
	
	void DoSpooked()
	{
		// Quick and dirty catch-all in case something that shouldn't be
		// scareable somehow is.
		if (CanBeScared == false)
		{
			scurredamount = 0;
			scurredtimer = 0;
		}
		
		if (scurredtimer > 4)
		{
			scurredamount--;
			scurredtimer = 0;
			A_SpawnItem("HolySweat",0,height-2);
		}
		
		// If you're no longer scared, you probably shouldn't be scared. If
		// that makes sense...
		if (scurredamount > 0)
		{
			bFRIGHTENED = 1;
		} else {
			bFRIGHTENED = 0;
		}
	}
	
	// Handles bleeding from Fire Axe wounds
	void DoBleeding()
	{
		if (CountInv("BleedingCounter") > 0)
		{
			bleedtimer++;
			
			if (bleedtimer >= 32)
			{
				DamageMobj(bloodletter, bloodletter, 5, "Bleeding", 0, 0);
				A_SpawnProjectile (BloodType, (height / 2), 0, random (0, 360), 2, random (0, 160));
				
				for (int i; i < 10; i++)
				{
					A_SpawnParticle(BloodColor,SPF_RELATIVE,random(16,32),random(3,8),0,0,0,(height / 2),frandom(4.5,-4.5),frandom(4.5,-4.5),frandom(1,8),0,0,-0.4);
				}
				
				A_PlaySound("monsters/bleed", CHAN_5);
				A_TakeInventory("BleedingCounter", 1);
				bleedtimer = 0;
			}
		}
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		// De-scare damaged monsters
		scurredamount = 0;
		scurredtimer = 0;
		
		// When damaged by the Axe, note down the inflictor as the cause of the bleeding damage
		if (mod == "Axe")
		{
			bloodletter = inflictor;
		}
		
		// If on fire, spawn some Armor
		// Based on Shadsy's Mega Imp code from Reelism 2
		if (CountInv("MetaBurnDOT") && mod != "Fire")
		{
			for (int i = 0; i < 1+(damage/25); i++) 
			{
				A_SpawnItemEx("MetaArmorPinataFade",random(0,radius/2),random(0,radius/2),random(16,height),random(2,8),0,random(4,8),random(0,365),SXF_NOCHECKPOSITION);
			}
		}
		
		return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
	}
	
	// A_CheckSolidFooting("State", flags)
	// Checks if the actor is on a solid object, jumps if true.
	// Flags (somewhat self explanatary):
	// CSF_SOLIDACTORS, CSF_SOLIDGROUND, CSF_ALL (default)
	// Authored by The Zombie Killer
	action state A_CheckSolidFooting(statelabel label, int flags = CSF_ALL)
	{
		if (invoker.oldVel != vel.z)
			return null;

		// are we standing on solid ground?
		if (abs(pos.z - GetZAt()) <= 1 && (flags & CSF_SOLIDGROUND))
			return ResolveState(label);
	   
		// are we standing on an actor?
		bool ok; Actor below;
		[ok, below] = TestMobjZ(true);
		if (below && (flags & CSF_SOLIDACTORS))
			return ResolveState(label);
	   
		if (vel.z == invoker.oldVel && (flags & CSF_SOLIDGROUND))
			return ResolveState(label);

		return null;
	}

	// A_CheckNoSolidFooting("State", flags)
	// An inverse version of A_CheckSolidFooting
	// Flags (somewhat self explanatary):
	// CSF_SOLIDACTORS, CSF_SOLIDGROUND, CSF_ALL (default)
	// Authored by The Zombie Killer
	action state A_CheckNoSolidFooting(statelabel label, int flags = CSF_ALL)
	{
		return A_CheckSolidFooting(label, flags) == null ? ResolveState(label) : null;
	}
}

// SQUISH!
class MetaCrush : Actor replaces RealGibs
{
	Default
	{
		+DROPOFF
		+CORPSE
		+NOTELEPORT
		+DONTGIB
	}
	
	States
	{
		Spawn:
			POL5 A 0;
			POL5 A 0 
			{	
				A_PlaySound("monsters/crushed");
				
				for (int i = 0; i < 3; i++)
				{
					A_SpawnProjectile ("FlyingBlood", random(8,32), 0, random (0, 360), 2, random (0, 160));
					A_SpawnProjectile ("MetaSploosh", random(8,32), 0, random (0, 360), 2, random (0, 160));
				}
			
				A_SpawnItem("BloodSplat");
			}
			POL5 A -1;
			Stop;
	}
}

// Wild Weasel's tracers. Again. Yup.
class MonsterTracer : FastProjectile
{
	Default
	{
		Alpha 0.90;
		RenderStyle "Add";
		Radius 2;
		Height 2;
		Speed 50;
		PROJECTILE;
		+BLOODSPLATTER
		Scale 0.4;
		MissileType "MonsterTracerTrail";
		MissileHeight 8;
		Decal "BulletChip";
	}
	
	States
	{
	Spawn:
		PUFF A 1 BRIGHT;
		PUFF A 1 BRIGHT A_CheckSightOrRange(192,"Whiz");
		Loop;
	Whiz:
		PUFF A 1 BRIGHT A_PlaySound("whiz",1.0,0,ATTN_NONE);
	SpawnNoWhiz:
		PUFF A 1 BRIGHT;
		Loop;
	Death:
	Crash:
		PUFF A 2 BRIGHT A_SpawnDebris("MonsterTracerSpark");
		PUFF B 1 BRIGHT A_SetTranslucent(0.9,0);
		PUFF B 1 BRIGHT A_PlaySound("ricochet");
		PUFF CD 2 BRIGHT;
		Stop;
	XDeath:
		TNT1 A 3 A_PlaySound("hitflesh");
		Stop;
	}
}

class MonsterTracerTrail : Actor
{ 
	Default
	{
		Alpha 0.75;
		RenderStyle "Add";
		Speed 0;
		+NOBLOCKMAP
		+NOGRAVITY
		+NOTELEPORT
		+CANNOTPUSH
		+NODAMAGETHRUST
		Scale 0.4;
	}
	
	States
	{
	Spawn:
		PUFF A 1 BRIGHT A_FadeOut(0.3);
		Loop;
	}
}

class MonsterTracerSpark : Actor
{
	Default
	{
		Health 4;
		radius 3;
		height 6;
		speed .1;
		RenderStyle "Add";
		Alpha 1;
		Scale 0.5;
		Mass 0;
		+missile
		+doombounce
		+FLOORCLIP
		+DONTSPLASH
		+NOTELEPORT
	}
	
	States
	{
		PUFF A 1;
		PUFF AAAAA 1  Bright A_SetTranslucent(.8,1);
		PUFF AAAAAA 1  Bright A_SetTranslucent(.6,1);
		PUFF AAAAAAAA 1  Bright A_SetTranslucent(.4,1);
		PUFF AAAAAAAAAA 1 Bright A_SetTranslucent(.2,1);
		Stop;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		return false;
	}
}

// Monster Damage
class MonsterZombiemanTracer : MonsterTracer
{
	Default
	{
		DamageFunction (random(1,4));
	}
}

class MonsterShotgunGuyTracer : MonsterTracer
{
	Default
	{
		DamageFunction (random(1,5)*3);
	}
}

class MonsterCommandoTracer : MonsterTracer
{
	Default
	{
		DamageFunction (random(1,3));
	}
}