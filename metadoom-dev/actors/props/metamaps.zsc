/*
----------------------------
MetaDoom
Actor Definitions
Props - MetaDoom Maps
----------------------------
*/

// Burning flames, adapted from Doom RPG. Blocks the player's path, can be
// extinguished with the fire extinguisher weapon.
class MetaFire : Actor
{
	Default
	{
		health 20;
		Radius 32;
		Height 32;
		+SOLID
		+NOTAUTOAIMED
		+DONTTHRUST
		+SHOOTABLE
		+NOBLOOD
		+DONTGIB
		+RANDOMIZE
		+NOICEDEATH
		+ALLOWPAIN
		+INVISIBLE
		+NORADIUSDMG
		damagetype "MapFire";
		damagefactor "Normal", 0;
		damagefactor "Fist", 0;
		damagefactor "Fire", 0;
		damagefactor "MapFire", 0;
		damagefactor "FireExtinguisher", 1;
		damagefactor "LightningStun", 0;
		damagefactor "Axe", 50;
		painchance "LightningStun", 0;
		painchance 255;
		Tag "Scorching Flames";
		Species "NoHitScan"; // GROSS hack!
		//$Category "MetaDoom Props & Objects"
		//$Title "Scorching Flames (Extinguishable)"
		//$NotAngled
		//$Color 3
	}
	
	States
	{
	Spawn:
		PRFI A 0;
		PRFI A 0
		{
			A_PlaySound("props/mapfire", CHAN_BODY, 1.0, 1);
			A_SpawnItem("MetaFireScorchMark",0,0);
		}
	Idle:
		PRFI A 4 Bright 
		{
			A_Explode(10,64,!XF_HURTSOURCE);
			
			if (!CheckIfSeen())
			{
				A_SpawnItem("MetaBurningBarrelSmoke",0,35);
				for (int i = 0; i < 3; i++)
				{
					A_SpawnItemEx("MetaFireParticle", random(-16, 16), random(-16, 16), 1);
				}
			}
		}
		Loop;
	Pain:
		PRFI A 0;
		PRFI A 0 A_PlaySound("monsters/lostsoul/extinguish", CHAN_VOICE, 0.8, 0, ATTN_NORM, false, 1.5);
		goto Idle;
	Death:
		PRFI A 0;
		PRFI A 0 A_PlaySound("monsters/lostsoul/extinguish");
		PRFI AAAAAAAAAAAAAAA 1 A_SpawnItem("MetaBurningBarrelSmoke",0,35);
		stop;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (other.bMISSILE && !(other is "MetaFireExtinguisherSpray"))
		{	
			return false;
		} else {
			return true;
		}
	}
}

class MetaFireParticle : Actor
{
	Default
	{
		+NOBLOCKMAP;
		+NOGRAVITY;
		+ALLOWPARTICLES;
		+RANDOMIZE;
		RenderStyle "add";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		height 1;
		radius 1;
	}
	
	States
	{
	Spawn:
		FIR2 A 0;
		FIR2 A 0
		{
			bSPRITEFLIP = random(0,1);
			A_SetScale(frandom(1.0,1.7),frandom(0.7,1.0)); 
		}
		FIR2 ABCD 2 Bright A_SetScale(scale.x-0.1,scale.y+0.1);
	StartFading:
		FIR2 EFGH 2 Bright
		{
			A_SetScale(scale.x-0.1,scale.y+0.1);
			A_FadeOut(0.2);
		}
		stop;
	}
}

class MetaFireScorchMark : ExplosionScorchMark
{
	Default
	{
		scale 2.0;
	}
}

// Item Box. Contains a mapper-specified item, or some loot if no item is present.
class MetaItemBox : Actor // replaces TechLamp2
{
	Default
	{
		health 5;
		Radius 16;
		Height 32;
		+SOLID
		+NOTAUTOAIMED
		+DONTTHRUST
		+SHOOTABLE
		+NOBLOOD
		+DONTGIB
		+RANDOMIZE
		+NOICEDEATH
		damagefactor "HolyWater", 0;
		damagefactor "FireExtinguisher", 0;
		damagefactor "LightningStun", 0;
		Tag "Container";
		//$Category "MetaDoom Props & Objects"
		//$Title "Item Box (Breakable)"
		//$Color 11
		//$Arg0 "Contents"
		//$Arg0Str "Contents"
		//$Sprite "PRIBA0"
	}
	
	States
	{
	Spawn:
		PRIB A 4;
		Loop;
	Death:
		TNT1 A 0
		{
			for (int i = 0; i < 3; i++)
			{
				A_SpawnItem("MetaGibItemBox",0,random(16,42));
				A_SpawnItem("MetaGibItemBox",0,random(0,16));
			}
			
			A_PlaySound("props/itembox/break", CHAN_BODY);
			A_Stop();
			A_Fall();
			A_DropContents();
		}
		stop;
	}
	
	void A_DropContents()
	{
		string RandLootList[] =
		{
			"LootCredits",
			"LootDagger",
			"LootChest",
			"LootBible",
			"LootCrown",
			"LootGoblet"
		};
		
		// Spawn an item?
		Class<Actor> type = GetSpawnableType(args[0]);
		if (type != null)
		{
			if (!(level.nomonsters || sv_nomonsters) || !(GetDefaultByType (type).bIsMonster))
			{ // Only spawn monsters if not -nomonsters
				Actor mo = Spawn (type, Pos, ALLOW_REPLACE);

				mo.vel.x = random(-2,2);
				mo.vel.y = random(-2,2);
				mo.vel.z = 8;
				mo.angle = self.angle;
			}
		} else {
			int i = random(0,5);
			
			Actor mo = Spawn (RandLootList[i], Pos, ALLOW_REPLACE);

			mo.vel.x = random(-2,2);
			mo.vel.y = random(-2,2);
			mo.vel.z = 8;
		}
	}
}

class MetaGibItemBox : MetaGibBarrel
{
	Default
	{
	SeeSound "";
	}
	
	States
	{
	Spawn:
		BAGI A 0;
		BAGI ABCDE 0 A_Jump(128, "Setup");
		goto Setup;
	Setup:
		"####" # 0 ThrustThingZ (0, random(32,45), 0, 1);
		"####" # 0 ThrustThing(random(0,360), 8, 1, 0);
		goto ChangeDir;
	}
}

// Meathook Target - prototype, needs some work
class MetaMeathookTarget : Actor
{
	Default
	{
		Radius 38;
		Height 38;
		Health 1;
		+SHOOTABLE
		-SOLID
		+NODAMAGE
		+NOGRAVITY
		//$Category "MetaDoom Props & Objects"
		//$Title "Meathook Grapple Target"
		//$Color 11
	}
	
	States
	{
	Spawn:
	Pain:
		HOGR ABCD 4 Bright;
		Loop;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (other is "PlayerPawn")
		{
			//other.vel.z = other.vel.z + 2;
			//other.A_GiveInventory("MetaGrappleGrav", 1);
		}
		return false;
	}
	
	override void Tick()
	{
		A_RadiusGive("MetaGrappleGrav", 72, RGF_PLAYERS, 1);
		A_RadiusGive("MeatHookRefill", 72, RGF_PLAYERS, 1);
		Super.Tick();
	}
}

// Temporarily disable gravity on a player after they finish using a grapple
// point, to give them a moment to aim for another grapple spot
class MetaGrappleGrav : Inventory
{
	int ticktock;
	
	override void DoEffect()
	{
		if (owner)
		{
			owner.gravity = 0;
			ticktock++;
		}
		
		if (ticktock == 8)
		{
			owner.A_TakeInventory("MetaGrappleGrav", 999);
		}
		Super.DoEffect();
	}
	
	override void DetachFromOwner()
	{
		owner.gravity = owner.default.gravity;
		Super.DetachFromOwner();
	}
}