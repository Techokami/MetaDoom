/*
----------------------------
MetaDoom
Actor Definitions
Mixin Code
----------------------------
*/

// I have no idea what the hell mixins are, except that they're from one of
// Phantombeta's pet languages and they sound kinda like "fixin's" when said
// aloud in a mock-southern accent, which mostly just makes me hungry.
// So let's find out what they are!

// Try and spawn items and loot in a more normal way. I've totally rewritten 
// this like five friggin' times in one day...
// Thanks to Boondorl and Comet for helping jog my hole-riddled brain!
mixin class LootSpawn
{
	void A_SpawnLoot(string item)
	{
		// If this is a MetaDoom map, don't do anything.
		bool dothething = true;
		
		ThinkerIterator it = ThinkerIterator.Create("MetaDoomMapID");
		Actor mo;
		while (mo = MetaDoomMapID(it.Next()))
		{
			if (meta_developer)
				Console.printf("Item: This is a MetaDoom map, no automagic item spawning!");
			dothething = false;
		}
		
		if (dothething == true)
		{
			actor newitem = Actor.Spawn(item, self.pos);
			
			newitem.angle = random(0,360);		
			newitem.speed = 2;
			int oldradius;
			bool lavadive = false;
			oldradius = newitem.radius;
			int tries = 0;
			
			// Lower the item's radius so it's easier for it to run around without
			// being clipped into a wall (see. healthkits spawned by a Quad at the
			// very start of TNT MAP01)
			newitem.A_SetSize(8);
			
			// Make the item wander around looking for a new forever-home
			for (int i = 0; i < 64; i++)
			{
				newitem.A_Wander();
				
				// Try and make spawned items stay away from items of the same type,
				// to prevent them more or less being placed in the same place as another
				// item spawned at the same time. This ALMOST works, except when spawners
				// are spawned manually using the summon cheat.
				BlockThingsIterator bit = BlockThingsIterator.Create(self,64,0);
				while (bit.Next())
				{
					Actor fo = bit.thing;
					
					if (newitem.GetClassName() == item || fo.GetClassName() == self.GetClassName()) // && !(fo is newitem))
					{
						newitem.A_Face(fo, 0, 270, 180, 0, 0);
						
						for (int i = 0; i < 8; i++)
						{
							newitem.A_Wander(CHF_DONTTURN);
						}
					}
				}
				
				// Stuck on a damage sector? Give it insane stepheight so it can haul
				// its ass out to somewhere safe, and give it a little time.
				if (level.PointInSector((newitem.pos.x,newitem.pos.y)).damageamount != 0)
				{
					newitem.maxstepheight = 128;
					//newitem.setOrigin(self.pos, false);
					lavadive = true;
					tries++;
					
					// Avoids infinite loops
					if (tries < 100)
					{
						i--;
					}
					
				}
			}
		
			// Reset the radius from before so it's still easy to pick up.
			newitem.A_SetSize(oldradius);
			
			// Tell the people what they've won, John...
			if (meta_developer)
			{
				if (!lavadive)
				{
					Console.printf("Item: %s successfully placed at %i x %i", item, newitem.pos.x, newitem.pos.y);
				} else {
					Console.printf("Item: %s at %i x % i tried to take a lava dive, ended up at %i x %i", item, self.pos.x, self.pos.y, newitem.pos.x, newitem.pos.y);
				}
			}
		}
	}
}