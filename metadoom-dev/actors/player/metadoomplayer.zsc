/*
----------------------------
MetaDoom
Actor Definitions
Player Class
----------------------------
*/

// counters for death states
// these tell the metadoom weapon how you done fucked up
class DeathStateFallingDown : _Boolean {}
class DeathStateSpeedyDrop : _Boolean {}
class DeathStateExplosion : _Boolean {}
class DeathStateFire : _Boolean {}
class DeathStateElec : _Boolean {}
class DeathStateGibbed : _Boolean {}

// counters for acs scripts
class DisableHUD : _Boolean {}
class PlayerHealthWarning : _Boolean {}
class FireExtinguished : _Boolean {}
class FireExtinguisherCheat : _Boolean {}

class x100Percent_Monsters : _Boolean {}
class x100Percent_Items : _Boolean {}
class x100Percent_Secrets : _Boolean {}
// prevent multiple 100% scripts from running at once
class x100Percent_Running : _Boolean {}

class MetaDoomPlayer : PlayerPawn
{
	Default
	{
		Speed 1;
		Health 100;
		Radius 16;
		Height 56;
		Mass 100;
		PainChance 255;
		Player.DisplayName "Slayer";
		Player.CrouchSprite "MPLC";
		Player.StartItem "MetaPistol";
		Player.WeaponSlot 1, "MetaPistol", "MetaBerserkFist", "MetaLastResortFist", "MetaCheatDetector";
		Player.WeaponSlot 2, "MetaHolyWaterPistol", "MetaShotgun";
		Player.WeaponSlot 3, "MetaFireExtinguisher", "MetaSuperShotgun";
		Player.WeaponSlot 4, "MetaChaingun", "MetaMachineGun";
		Player.WeaponSlot 5, "MetaGrenadeLauncher", "MetaRocketLauncher";
		Player.WeaponSlot 6, "MetaGaussCannon", "MetaLightningGun", "MetaPlasmaRifle";
		Player.WeaponSlot 7, "MetaBFG9000", "MetaUnmaker", "MetaSoulcube";
		Player.WeaponSlot 8, "MetaChainsaw", "MetaAxe";
		
		+NOSKIN
		
		Player.ColorRange 112, 127;
		Player.Colorset 0, "Green",			0x70, 0x7F,  0x72;
		Player.Colorset 1, "Gray",			0x60, 0x6F,  0x62;
		Player.Colorset 2, "Brown",			0x40, 0x4F,  0x42;
		Player.Colorset 3, "Red",			0x20, 0x2F,  0x22;
		// Doom Legacy additions
		Player.Colorset 4, "Light Gray",	0x58, 0x67,  0x5A;
		Player.Colorset 5, "Light Brown",	0x38, 0x47,  0x3A;
		Player.Colorset 6, "Light Red",		0xB0, 0xBF,  0xB2;
		Player.Colorset 7, "Light Blue",	0xC0, 0xCF,  0xC2;
		
		damagefactor "DogCollar", 0;
		damagefactor "Dogsplosion", 0;
		damagefactor "NoHarmPlayer", 0;
	}
	
	// This is a part of a gross hack to ensure that the player's angle isn't
	// snapped around in a disorienting fashion if they get punched by another
	// player in deathmatch.
	float oldangle;
	
	States
	{
	Spawn:
		MPLY Z -1;
		Loop;
	See:
		MPLY ABCD 4;
		goto Spawn;
	Missile:
		MPLY E 12;
		Goto Spawn;
	Melee:
		MPLY F 6 BRIGHT;
		Goto Missile;
	Pain:
		MPLY G 4;
		MPLY G 4 A_Pain;
		Goto Spawn;
	Pain.Fist:
		MPLY G 0 
		{
			// See above comment about gross hack.
			oldangle = angle;
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 16, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			angle = oldangle;
		}
		goto Pain;
	Pain.KrautBoot:
		MPLY G 0 
		{
			// Ditto.
			oldangle = angle;
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 16, 1, 0);
			ThrustThingZ(0,32,0,1);
			angle = oldangle;
		}
		goto Pain;
	Death.KrautBoot:
	Death.Fist:
		MPLY G 0
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 16, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
		}
		goto Death;
	XDeath.KrautBoot:
	XDeath.Fist:
		MPLY G 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 16, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
		}
		goto XDeath;
	Pain.BerserkFist:
		MPLY G 0 
		{
			// You know the drill by now.
			oldangle = angle;
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 64, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			angle = oldangle;
		}
		goto Pain;
	Death.BerserkFist:
		MPLY G 0
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 64, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
		}
		goto Death;
	XDeath.BerserkFist:
		MPLY G 0 
		{
			A_FaceTarget();
			ThrustThing(angle*256/360+128, 64, 1, 0);
			ThrustThingZ(0,32,0,1);
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
			A_SpawnItemEx("MetaHealthPinata",0,0,32,random(0,8),0,random(0,8),random(0,360));
		}
		goto XDeath;
	Pain.MapFire:
	Pain.Slime:
		MPLY G 4;
		MPLY G 4 A_PlaySound("*hurtslime");
		Goto Spawn;
	Death:
		MPLY H 10;
		MPLY I 10 A_PlayerScream;
		MPLY J 10 A_NoBlocking;
		MPLY K 10;
		MPLY L -1;
		Stop;
	Death.ExplodingBarrel:
	Death.Explosive:
		MPLY P 5 A_GiveInventory("DeathStateExplosion");
		MPLY Q 5 A_PlayerScream;
		MPLY R 5 A_NoBlocking;
		MPLY STU 5;
		MPLY V -1;
		Stop;
	Death.MapFire:
	Death.Fire:
		BURN A 5 A_GiveInventory("DeathStateFire");
		BURN A 3 Bright 
		{
			A_PlayerScream();
			A_PlaySound("player/burn",CHAN_6);
		}
		BURN B 3 Bright;
		BURN C 3 Bright ThrustThing(random(0,365),8,0,0);
		BURN D 3 Bright A_NoBlocking;
		BURN E 5 Bright;
		BURN FGH 5 Bright ThrustThing(random(0,365),8,0,0);
		BURN I 5 Bright;
		BURN JKL 5 Bright ThrustThing(random(0,365),8,0,0);
		BURN M 5 Bright;
		BURN N 5 Bright;
		BURN OPQPQ 5 Bright;
		BURN RSTU 7 Bright;
		BURN V -1;
		Stop;
	Death.Elec:
		MPLY O 0 A_GiveInventory("DeathStateElec");
		MPLY H 0
		{
			A_PlayerScream();
			A_PlaySound("player/zap",CHAN_7);
		}
		MPLY HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH 1
		{
			A_SetScale(frandom(0.95,1.06));
			A_SpawnItemEx("MetaZappy",random((0-radius),radius),random((0-radius),radius),random(8,56),0,0,0);
		}
		MPLY H 10 A_SetScale(1.0);
		MPLY I 10;
		MPLY J 10 A_NoBlocking;
		MPLY K 10;
		MPLY L -1;
		Stop;
	Death.Crush:
		MPLY H 10 A_GiveInventory("DeathStateGibbed");
		MPLY I 10 A_PlaySound("*crushed");
		MPLY J 10 A_NoBlocking;
		MPLY K 10;
		MPLY L -1;
		Stop;
	XDeath.ExplodingBarrel:
	XDeath.Explosive:
	XDeath:
		MPLY O 0 A_GiveInventory("DeathStateGibbed");
		MPLY O 5;
		TNT1 A 0 A_SkullPop("MetaPlayerSkull");
		TNT1 A 0 A_SpawnItemEx("MetaGibber",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
		TNT1 A -1;
		Stop;
	}
	
	// If the DOG GUN is equipped, take ammo from that instead of damage
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if (player.ReadyWeapon is "MetaDogGun_HellHound" && CountInv("DogGunHealth") > 0 && damage > 0)
		{
			A_TakeInventory("DogGunHealth", damage);
			A_PlaySound("monsters/hellhound/pain", CHAN_VOICE);
			A_PlaySound("weapons/doggun/absorb", CHAN_BODY, 1.0, 0, ATTN_NORM, 0, frandom(0.8,1.2));
			
			if (damage < 10)
			{
				A_Quake(3,8,0,8,0);
			} else if (damage < 20)
			{
				A_Quake(4,12,0,8,0);
			} else if (damage < 30)
			{
				A_Quake(5,16,0,8,0);
			} else if (damage < 40)
			{
				A_Quake(6,20,0,8,0);
			} else if (damage < 50)
			{
				A_Quake(7,25,0,8,0);
			} else if (damage >= 50)
			{
				A_Quake(8,30,0,8,0);
			}
			
			return false;
		} else {
			return Super.DamageMobj(inflictor, source, damage, mod, flags, angle);
		}
	}
	
	// When killed, copy your means of death to a CVar so the Ironman game over map
	// can react to it because when working with legacy code, nothing can ever be simple.
	override void Die(Actor source, Actor inflictor, int dmgflags, Name MeansOfDeath)
	{
		// Stop sound channels
		A_StopSound(CHAN_BODY);
		A_StopSound(CHAN_WEAPON);
		A_StopSound(CHAN_6);
		
		CVar ironmanCVar = CVar.GetCVar("meta_ironmantemp");
		
		if (!multiplayer)
		{
			if (MeansOfDeath != "None")
			{
				//console.printf(MeansOfDeath);
				ironmanCVar.SetString(MeansOfDeath);
			} else {
				//console.printf(source.GetClassName());
				ironmanCVar.SetString(source.GetClassName());
			}
			
			// Emphasise copying the name of the actor that killed you, so long as
			// it isn't you.
			if (source != null && !(source is "MetaDoomPlayer"))
			{
				ironmanCVar.SetString(source.GetClassName());
			}
		}
		
		Super.Die(source,inflictor,dmgflags,MeansOfDeath);
	}
	
	// Per-Tick scripts and suck
	override void Tick()
	{
		// Tell voodoo dolls to fuck right off
		if (!player || !player.mo || player.mo != self)
		{
			Super.Tick();
			return;
		}
		
		// Recharge Inventory Items
		A_GiveInventory("InventoryFuel_HandGrenade", 1);
		A_GiveInventory("InventoryFuel_DogCollar", 1);
		A_GiveInventory("InventoryFuel_Hologram", 1);
		A_GiveInventory("InventoryFuel_KineticMine", 1);
		A_GiveInventory("InventoryFuel_ShieldWall", 1);
		A_GiveInventory("InventoryFuel_SiphonGrenade", 1);
		A_GiveInventory("InventoryFuel_TeslaRocket", 1);
		A_GiveInventory("InventoryFuel_TheArtifact", 1);
		
		// MPLY a noise when your shit's basically refilled. This is done when
		// it's one tic away from being refilled as a cheap way to avoid having
		// to work out a "proper" but more complicated way.
		if (
		(CountInv("InventoryFuel_HandGrenade") == INV_COOLDOWN_GENERIC-1)
		|| (CountInv("InventoryFuel_DogCollar") == INV_COOLDOWN_GENERIC-1)
		|| (CountInv("InventoryFuel_Hologram") == INV_COOLDOWN_HOLOGRAM-1)
		|| (CountInv("InventoryFuel_KineticMine") == INV_COOLDOWN_GENERIC-1)
		|| (CountInv("InventoryFuel_ShieldWall") == INV_COOLDOWN_SHIELD-1)
		|| (CountInv("InventoryFuel_SiphonGrenade") == INV_COOLDOWN_SIPHON-1)
		|| (CountInv("InventoryFuel_TeslaRocket") == INV_COOLDOWN_GENERIC-1)
		|| (CountInv("InventoryFuel_TheArtifact") == INV_COOLDOWN_ARTIFACT-1)
		)
		{
			A_PlaySound("inventory/refresh",CHAN_UI,1.0,0,ATTN_NONE,true);
			A_GiveInventory("GimmeCooldownFlash", 1);
		}
		
		// Fire Extinguisher Self-Sprayed FX
		if(CheckInventory("FireExtinguished",1) || CheckInventory("FireExtinguisherCheat",1))
		{
			A_SpawnItemEx("MetaFireExtinguisherSelfSprayFX",random(-16,16),random(-16,16),0,0,0,4);
		}
		
		Super.Tick();
	}
	
	// This version of DeathThink() is copy-pasted and modified slightly to allow
	// for additional control over the camera height lowering when killed.
	override void DeathThink ()
	{
		let player = self.player;
		int dir;
		double delta;

		player.Uncrouch();
		TickPSprites();

		player.onground = (pos.Z <= floorz);
		if (self is "PlayerChunk")
		{ // Flying bloody skull or flying ice chunk
			player.viewheight = 6;
			player.deltaviewheight = 0;
			if (player.onground)
			{
				if (Pitch > -19.)
				{
					double lookDelta = (-19. - Pitch) / 8;
					Pitch += lookDelta;
				}
			}
		}
		else if (!bIceCorpse && CheckInventory("DeathStateFallingDown", 1))
		{ // Fall to ground (if not frozen)
			// This check has been modified to only go ahead if DeathStateFallingDown
			// is in the inventory. Add or take this in the MetaDoomWeapon class
			// as appropriate.
			player.deltaviewheight = 0;
			if (player.viewheight > 6)
			{
				if (CheckInventory("DeathStateSpeedyDrop", 1))
				{
					player.viewheight -= 2;
				} else {
					player.viewheight -= 1;
				}
			}
			if (player.viewheight < 6)
			{
				player.viewheight = 6;
			}
			if (Pitch < 0)
			{
				Pitch += 3;
			}
			else if (Pitch > 0)
			{
				Pitch -= 3;
			}
			if (abs(Pitch) < 3)
			{
				Pitch = 0.;
			}
			
		}
		// Rest of this function is identical to gzdoom.pk3 and can be ignored.
		player.mo.CalcHeight ();
			
		if (player.attacker && player.attacker != self)
		{ // Watch killer
			double diff = deltaangle(angle, AngleTo(player.attacker));
			double delta = abs(diff);
	
			if (delta < 10)
			{ // Looking at killer, so fade damage and poison counters
				if (player.damagecount)
				{
					player.damagecount--;
				}
				if (player.poisoncount)
				{
					player.poisoncount--;
				}
			}
			delta /= 8;
			Angle += clamp(diff, -5., 5.);
		}
		else
		{
			if (player.damagecount)
			{
				player.damagecount--;
			}
			if (player.poisoncount)
			{
				player.poisoncount--;
			}
		}		

		if ((player.cmd.buttons & BT_USE ||
			((multiplayer || alwaysapplydmflags) && sv_forcerespawn)) && !sv_norespawn)
		{
			if (Level.maptime >= player.respawn_time || ((player.cmd.buttons & BT_USE) && player.Bot == NULL))
			{
				player.cls = NULL;		// Force a new class if the player is using a random class
				player.playerstate = (multiplayer || level.AllowRespawn || sv_singleplayerrespawn || G_SkillPropertyInt(SKILLP_PlayerRespawn)) ? PST_REBORN : PST_ENTER;
				if (special1 > 2)
				{
					special1 = 0;
				}
			}
		}
	}

	// Footsteps Code
	Footsteps fsteps;

	// Stuff that happens the moment the player is spawned.
	override void PostBeginPlay()
	{
		// Tell voodoo dolls to get proper stuffed
		if (!player || !player.mo || player.mo != self)
		{
			Super.PostBeginPlay();
			return;
		} 
		
		Super.PostBeginPlay();
	
		// Recharge all inventory items immediately.
		A_GiveInventory("InventoryFuel_HandGrenade", 999);
		A_GiveInventory("InventoryFuel_DogCollar", 999);
		A_GiveInventory("InventoryFuel_Hologram", 999);
		A_GiveInventory("InventoryFuel_KineticMine", 999);
		A_GiveInventory("InventoryFuel_ShieldWall", 999);
		A_GiveInventory("InventoryFuel_SiphonGrenade", 999);
		A_GiveInventory("InventoryFuel_TeslaRocket", 999);
		A_GiveInventory("InventoryFuel_TheArtifact", 999);
		
		// Footsteps Code
		Actor fstepsActor = Spawn("Footsteps",pos);
		if(fstepsActor != null)
		{
			fsteps = Footsteps(fstepsActor);
			fsteps.Init(self);
		}
	}
}

// The player's severed skull gib. Used when the player is gibbed, and possibly
// by other death states in the future...
class MetaPlayerSkull : PlayerChunk
{
	Default
	{
		Radius 4;
		Height 4;
		+DOOMBOUNCE
		+NOBLOCKMAP
		+DROPOFF
		PROJECTILE;
		+CANNOTPUSH
		+SKYEXPLODE
		+NOBLOCKMONST
		+NOSKIN
		-NOGRAVITY
		-NOBLOCKMAP
		-NOTELEPORT
		-EXPLODEONWATER
		+CANBOUNCEWATER
		+DONTTRANSLATE // Enough flags?
		+ROLLSPRITE
		+USEBOUNCESTATE
		bouncefactor 0.5;
		SeeSound "player/helmetgib";
		gravity 0.5;
		Speed 5;
	}
	
	// This is to fix a bug where the playerchunk's angle resets whenever it
	// bounces off the floor.
	double goodangle;
	
	States
	{
	Spawn:
		PLHD A 0;
		PLHD A 0 
		{
			ThrustThing(random(0,255), random(2,8), 0, 0);
			ThrustThingZ (0, 45, 0, 1);
			viewbob = 0; // playerchunks should not viewbob. ever. don't @ me.
		}
		goto See;
	See:
		PLHD B 0 A_SpawnProjectile("FlyingBloodCheap", -5,0,0);
		PLHD AAABBBCCCDDD 1 
		{
			A_SetRoll((roll + 1));
			goodangle = angle;
		}
		loop;
	See2:
		PLHD B 0 A_SpawnProjectile("FlyingBloodCheap", -5,0,0);
		PLHD AAABBBCCCDDD 1 
		{
			A_SetRoll((roll - 1));
			goodangle = angle;
		}
		loop;
	Bounce.Floor:
		PLHD B 0 
		{
			angle = goodangle;
			A_SpawnItem("BloodSplatSmall");
		}
	Bounce:
		PLHD B 0 { angle = goodangle; }
		PLHD B 0 A_Jump(128,"See2");
		goto See;
	Death:
		PLHD B -1 A_CheckPlayerDone;
		Wait;
	}
}