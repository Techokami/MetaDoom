/*
----------------------------
MetaDoom
Actor Definitions
Blood
----------------------------
*/

// Taken from Smooth Doom, with alterations. Thanks, guys!
class BloodReducer : _Boolean {}

class Gibs1 : Actor
{
	Default
	{
	Radius 3;
	Height 3;
	Speed 7;
	Scale 1.0;
	Mass 1;
	+NOBLOCKMAP
	+MISSILE
	+NOTELEPORT
	+MOVEWITHSECTOR
	+CLIENTSIDEONLY
	+BLOODLESSIMPACT 
	+DONTSPLASH
	+FLOORCLIP
	Decal "Bloodsmear";
	Gravity 0.7;
	}
	States
	{
	Spawn:
		GIBS C 3;
		Loop;
	Death:
		TNT1 A 0 A_JumpIf(waterlevel == 2,"Disappear");
		GIBS B 3;
		GIBS B -1;
		Stop;
	Disappear:
		TNT1 A 1;
		stop;
	}
}

class BlueGibs1 : Gibs1
{
	Default
	{
	decal "bluebloodsmear";
	translation "32:47=240:243", "176:191=199:207";
	}
}

class GreenGibs1 : Gibs1
{
	Default
	{
	decal "greenbloodsmear";
	translation "172:191=118:123","23:47=119:127","160:167=112:119";
	}
}

class XBlood : Actor Replaces Blood
{
	Default
	{
	+FORCEXYBILLBOARD
	+GHOST
	+NOBLOCKMAP
	+NOGRAVITY
	+NOCLIP
	-DONTSPLASH
	+ALLOWPARTICLES 
	decal "bloodsplat";
	Speed 0;
	}
	
	states
	{
	Spawn:
		TNT1 AA 0; 
		TNT1 AA 0 A_SpawnProjectile ("FlyingBlood", 0, 0, random (0, 360), 2|CMF_BADPITCH, random (0, 160));
		TNT1 AAAA 0 A_SpawnProjectile ("FlyingBloodFast", 0, 0, random (0, 360), 2|CMF_BADPITCH, random (50, 120));
		BLUD CBA 2;
		stop;
	Disappear:
		TNT1 A 1;
		stop;
	}
}

class XBloodFix : XBlood replaces BloodSplatter {}

class BlueBlood : XBlood
	{
	Default
	{
	decal "bluebloodsplat";
	translation "1:191=200:207","208:255=200:207";
	}
	states
	{
	Spawn:
		TNT1 AA 0;
		TNT1 AA 0 A_SpawnProjectile ("BlueFlyingBlood", 0, 0, random (0, 360), 2|CMF_BADPITCH, random (0, 160));
		TNT1 AA 0 A_SpawnProjectile ("BlueFlyingBloodFakeFast", 0, 0, random (0, 360), 2|CMF_BADPITCH, random (0, 180));
		BLUD ABC 2;
		stop;
	}
}

class GreenBlood : XBlood
{
	Default
	{
	translation "16:47=112:127","185:191=11:12","175:191=112:127";
	decal "greenbloodsplat";
	}
	states
	{
	Spawn:
		TNT1 AA 0;
		TNT1 AA 0 A_SpawnProjectile ("GreenFlyingBlood", 0, 0, random (0, 360), 2|CMF_BADPITCH, random (0, 160));
		TNT1 AA 0 A_SpawnProjectile ("GreenFlyingBloodFakeFast", 0, 0, random (0, 360), 2|CMF_BADPITCH, random (0, 180));
		BLUD ABC 2;
		stop;
	}
}

class FlyingBlood : Gibs1
{
	Default
	{
	-DOOMBOUNCE
	-SOLID
	+THRUACTORS
	-DONTSPLASH
	decal "bloodsplat";
	Speed 4;
	Scale 1.0;
	}
	
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 a_jump(255, "spawn1", "spawn2");
	Spawn1:
		BLUD F 5;
		Loop;
	Spawn2:
		BLUD G 5;
		Loop;
	Death:
		TNT1 A 0 A_JumpIf(waterlevel == 2,"OutDamnSpot");
		TNT1 A 0; //A_JumpIf(CallACS("BloodSpotToggle")==0, "OutDamnSpot")
		BLUD F 1;
		TNT1 A 0 
		{
			A_SpawnItem("BloodSplatSmall"); //A_SpawnItem("XBloodspot", 0, 5)
			A_PlaySound("effects/blood");
		}
		Stop;
	OutDamnSpot:
		BLUD F 1;
		stop;
	}
}

class FlyingBloodCheap : FlyingBlood
{
	States
	{
	Death:
		TNT1 A 0 A_JumpIf(waterlevel == 2,"OutDamnSpot");
		TNT1 A 0; //A_JumpIf(CallACS("BloodSpotToggle")==0, "OutDamnSpot")
		BLUD F 1;
		BLUD F 0 A_Jump(64, "MakeAStain");
		stop;
	MakeAStain:
		TNT1 A 0 
		{
			A_SpawnItem("BloodSplatSmall"); //A_SpawnItem("XBloodspot", 0, 5)
			A_PlaySound("effects/blood");
		}
		Stop;
	}
}

class BlueFlyingBlood : FlyingBlood
{
	Default
	{
	decal "bluebloodsplat";
	translation "1:191=200:207","208:255=200:207";
	}
	
	states
	{
	Death:
		TNT1 A 0; //A_JumpIf(CallACS("BloodSpotToggle")==0, "OutDamnSpot")
		BLUD F 1;
		TNT1 A 0 
		{
			A_SpawnItem("BloodSplatSmallBlue"); //A_SpawnItem("XBloodspot", 0, 5)
			A_PlaySound("effects/blood");
		}
		Stop;
	OutDamnSpot:
		BLUD F 1;
		stop;
	}
}

class BlueFlyingBloodCheap : FlyingBlood
{
	Default
	{
	decal "bluebloodsplat";
	translation "1:191=200:207","208:255=200:207";
	}
	
	States
	{
	Death:
		TNT1 A 0 A_JumpIf(waterlevel == 2,"OutDamnSpot");
		TNT1 A 0; //A_JumpIf(CallACS("BloodSpotToggle")==0, "OutDamnSpot")
		BLUD F 1;
		BLUD F 0 A_Jump(64, "MakeAStain");
		stop;
	MakeAStain:
		TNT1 A 0 
		{
			A_SpawnItem("BloodSplatSmallBlue"); //A_SpawnItem("XBloodspot", 0, 5)
			A_PlaySound("effects/blood");
		}
		Stop;
	}
}

class GreenFlyingBlood : FlyingBlood
{
	Default
	{
	decal "greenbloodsplat";
	translation "174:191=112:127", "32:47=112:127";
	}
	
	states
	{
	Death:
		TNT1 A 0 A_JumpIf(waterlevel == 2,"OutDamnSpot");
		TNT1 A 0; //A_JumpIf(CallACS("BloodSpotToggle")==0, "OutDamnSpot")
		BLUD F 1;
		TNT1 A 0 
		{
			A_SpawnItem("BloodSplatSmallGreen"); //A_SpawnItem("XBloodspot", 0, 5)
			A_PlaySound("effects/blood");
		}
		Stop;
	OutDamnSpot:
		BLUD F 1;
		stop;
   }
}



class FlyingBloodFast: FlyingBlood
{
	Default
	{
	Speed 6;
	-DOOMBOUNCE
	+FORCEXYBILLBOARD
	-SOLID
	Scale 0.5;
	Gravity 0.8;
	}
}

class BlueFlyingBloodFast : FlyingBloodFast
{
	Default
	{
	translation "1:191=200:207","208:255=200:207";
	}
	
	states
	{
	Death:
		TNT1 A 0 A_JumpIf(waterlevel == 2,"OutDamnSpot");
		TNT1 A 0; //A_JumpIf(CallACS("BloodSpotToggle")==0, "OutDamnSpot")
		BLUD F 1;
		TNT1 A 0 
		{
			A_SpawnItem("BloodSplatSmallGreen"); //A_SpawnItem("XBloodspot", 0, 5)
			A_PlaySound("effects/blood");
		}
		Stop;
	OutDamnSpot:
		BLUD F 1;
		stop;
	}
}

class GreenFlyingBloodFast : FlyingBloodFast
{
	Default
	{
	decal "greenbloodsplat";
	translation "168:184=112:127","185:191=11:12","16:47=112:127";
	}
	states
	{
	Death:
		TNT1 A 0 A_JumpIf(waterlevel == 2,"OutDamnSpot");
		TNT1 A 0; //A_JumpIf(CallACS("BloodSpotToggle")==0, "OutDamnSpot")
		BLUD F 1;
		TNT1 A 0 
		{
			A_SpawnItem("BloodSplatSmallGreen"); //A_SpawnItem("XBloodspot", 0, 5)
			A_PlaySound("effects/blood");
		}
		Stop;
	OutDamnSpot:
		BLUD F 1;
		stop;
	}
}

class FlyingBloodFakeFast : FlyingBloodFast
{
	Default
	{
	Scale 0.3;
	Speed 12;
	-DOOMBOUNCE
	+FORCEXYBILLBOARD
	-SOLID
	}
}

class BlueFlyingBloodFakeFast : FlyingBloodFakeFast
{
	Default
	{
	decal "bluebloodsplat";
	translation "1:191=200:207","208:255=200:207";
	}
	
	states
	{
	Death:
		TNT1 A 0 A_JumpIf(waterlevel == 2,"OutDamnSpot");
		TNT1 A 0; //A_JumpIf(CallACS("BloodSpotToggle")==0, "OutDamnSpot")
		BLUD F 1;
		TNT1 A 0 A_SpawnItem("BloodSplatSmallBlue", 0, 5);
		Stop;
	OutDamnSpot:
		BLUD F 1;
		stop;
	}
}

class GreenFlyingBloodFakeFast : FlyingBloodFakeFast
{
	Default
	{
	decal "greenbloodsplat";
	translation "168:184=112:127","185:191=11:12","16:47=112:127";
	}
	
	states
	{
	Death:
		TNT1 A 0 A_JumpIf(waterlevel == 2,"OutDamnSpot");
		TNT1 A 0; //A_JumpIf(CallACS("BloodSpotToggle")==0, "OutDamnSpot")
		BLUD F 1;
		TNT1 A 0 
		{
			A_SpawnItem("BloodSplatSmallGreen"); //A_SpawnItem("XBloodspot", 0, 5)
			A_PlaySound("effects/blood");
		}
		Stop;
	OutDamnSpot:
		BLUD F 1;
		stop;
	}
}


// "flat decal" blood splats
// Reprogrammed by Major Cooke!

class BloodSplat : Actor
{
	Default
	{
		Radius 1;
		Height 1;
		Projectile;
		+NOINTERACTION
		+NOBLOCKMAP
		+NOTRIGGER
		+NOTELESTOMP
		+MOVEWITHSECTOR
		+RELATIVETOFLOOR
		+DONTSPLASH
		+FLATSPRITE
		+ROLLCENTER
		Renderstyle "Shaded";
		StencilColor "7b 00 00";
		Species "BloodSplat";
	}
	
	int user_gettime;
	int user_lifetime;
	int user_water;
	float user_scaleadd;
	float user_z;
	
	int bloodradius;
	
	static const string fluidtex_resa[] =
	{
		"FWATER1","FWATER2","FWATER3","FWATER4",
		"SLIME01","SLIME02","SLIME03","SLIME04",
		"SLIME05","SLIME06","SLIME07","SLIME08",
		"BLOOD1","BLOOD2","BLOOD3",
		// PSX Doom
		"WATER01","BSLIME01","CSLIME01",
		// BTSX
		"FWATER02"
	};
	
	static const string fluidtex_resb[] =
	{
		"NUKAGE1","NUKAGE2","NUKAGE3","LAVA1",
		"LAVA2","LAVA3","LAVA4",
		// Doom 64
		"D64B1_01","D64B2_01","D64BLOD1","D64N1_01",
		"D64N2_01","D64NUKG1","D64NUKG2","D64S1_01",
		"D64S2_01","D64SLDG1","D64SLDG2","D64W1_01",
		"D64W2_01","D64WATR1","D64WATR2","D64L1_01",
		"D64LAVA1","D64LAVA2"
	};
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			angle = 				random(0,359);
			user_gettime = 			GetCVar("meta_perf_bloodtime");
			//user_water = 			CallACS("BloodFX_Water", 0, 0, 0);
			
			for (int i = 0; i < fluidtex_resa.Size(); ++i)
			{
				if (floorpic == TexMan.CheckForTexture(fluidtex_resa[i], TexMan.Type_Flat))
				{
					//Console.Printf ("Blood 2");
					user_water = 2;
					break;
				}
			}
			
			for (int i = 0; i < fluidtex_resb.Size(); ++i)
			{
				if (floorpic == TexMan.CheckForTexture(fluidtex_resb[i], TexMan.Type_Flat))
				{
					//Console.Printf ("Blood 3");
					user_water = 3;
					break;
				}
			}
			
			//This should only be needed once. MOVEWITHSECTOR and RELATIVETOFLOOR
			//should, in theory,  take care of everything else.
			A_Warp(AAPTR_DEFAULT,0,0,frandom(0.0100000, 0.0199999),0,WARPF_NOCHECKPOSITION|WARPF_TOFLOOR);
			A_RadiusGive("BloodReducer", GetCvar("meta_perf_bloodcullradius"), RGF_MISSILES,1,null,"BloodSplat");
			
			user_z = pos.z;
						
			//Ordinary splat?
			if (self.GetClass() == "BloodSplat" ||
				self.GetClass() == "BloodSplatGreen" ||
				self.GetClass() == "BloodSplatBlue")
			{
				if (user_water == 3)	{ return resolvestate("W"); }
				if (user_water == 2)	{ return resolvestate("X"); }
				bloodradius = 24;
				return					A_Jump(256,"A","B","F");
			}
			
			//Small splat.
			bloodradius = 16;
			return					A_Jump(256,"C","D","E","G");
		}
		
	A:	BSPL A 0 A_Jump(256,"WaitForever");
	B:	BSPL B 0 A_Jump(256,"WaitForever");
	C:	BSPL C 0 A_Jump(256,"WaitForever");
	D:	BSPL D 0 A_Jump(256,"WaitForever");
	E:	BSPL E 0 A_Jump(256,"WaitForever");
	F:	BSPL F 0 A_Jump(256,"WaitForever");
	G:	BSPL G 0 A_Jump(256,"WaitForever");	
	W:	BSPL W 0 A_Jump(256,"WaitForever");
	X:	BSPL X 0 A_Jump(256,"WaitForever");
	
	WaitForever:
		"####" "#" 35
		{
			if (GetZAt(bloodradius,0) != floorz || GetZAt((0-bloodradius),0) != floorz || GetZAt(0,bloodradius) != floorz || GetZAt(0,(0-bloodradius)) != floorz)
			{
				A_Remove(AAPTR_DEFAULT, RMVF_EVERYTHING);
			}
			
			if (user_water >= 2)
			{
				A_SetTics(1);
				A_SetScale(Scale.X + 0.01);
				A_FadeOut(0.01);
				return resolvestate(null);
			}
		
			if (user_z != pos.z)
			{
				A_Warp(AAPTR_DEFAULT,0,0,frandom(0.0100000, 0.0199999),0,WARPF_NOCHECKPOSITION|WARPF_TOFLOOR);
				user_z = pos.z;
			}
		
			// If still ticking up the clock and not being culled...
			if ((user_lifetime < user_gettime) && 
			!CountInv("BloodReducer") &&
			!GetCVar("meta_perf_fadeblood"))
			{
				//Keep going.
				user_lifetime += 35;
			}
			else
			{
				if (CountInv("BloodReducer") ||	GetCVar("meta_perf_fadeblood"))
				{	return resolvestate("FadeWait");	}
				
				return resolvestate("FadeOut");
			}
			return resolvestate(null);
		}
		Wait;
	FadeWait:
		"####" "#" 24;
	FadeOut:
		"####" "#" 1 A_FadeOut(0.02);
		Wait;
	}
}

// Nothing to adjust here! We already have the CheckClass above handling the
// state jumps. 
class BloodSplatSmall : BloodSplat
{	}

class BloodSplatGreen : BloodSplat
{	Default { StencilColor "49 9a 3d"; }	}

class BloodSplatSmallGreen : BloodSplatSmall
{	Default { StencilColor "49 9a 3d"; }	}

class BloodSplatBlue : BloodSplat
{	Default { StencilColor "0 0 80"; }	}

class BloodSplatSmallBlue : BloodSplatSmall
{	Default { StencilColor "0 0 80"; }	}

// Permanent version of the flat blood splat decal, to be spawned by props
class BloodSplat_Permanent : BloodSplat
{
	States
	{
	Spawn:
		TNT1 A 0 NoDelay
		{
			angle = 				random(0,359);
			user_gettime = 			GetCVar("meta_perf_bloodtime");
			//user_water = 			CallACS("BloodFX_Water", 0, 0, 0);
			
			for (int i = 0; i < fluidtex_resa.Size(); ++i)
			{
				if (floorpic == TexMan.CheckForTexture(fluidtex_resa[i], TexMan.Type_Flat))
				{
					//Console.Printf ("Blood 2");
					user_water = 2;
					break;
				}
			}
			
			for (int i = 0; i < fluidtex_resb.Size(); ++i)
			{
				if (floorpic == TexMan.CheckForTexture(fluidtex_resb[i], TexMan.Type_Flat))
				{
					//Console.Printf ("Blood 3");
					user_water = 3;
					break;
				}
			}
			
			//This should only be needed once. MOVEWITHSECTOR and RELATIVETOFLOOR
			//should, in theory,  take care of everything else.
			A_Warp(AAPTR_DEFAULT,0,0,frandom(0.0100000, 0.0199999),0,WARPF_NOCHECKPOSITION|WARPF_TOFLOOR);
			A_RadiusGive("BloodReducer", GetCvar("meta_perf_bloodcullradius"), RGF_MISSILES,1,null,"BloodSplat");
			
			user_z = pos.z;
						
			//Ordinary splat?
			if (self.GetClass() == "BloodSplat_Permanent" ||
				self.GetClass() == "BloodSplatGreen_Permanent" ||
				self.GetClass() == "BloodSplatBlue_Permanent")
			{
				if (user_water != 1)	{ return resolvestate("Null"); }
				bloodradius = 24;
				return					A_Jump(256,"A","B","F");
			}
			
			//Small splat.
			bloodradius = 16;
			return					A_Jump(256,"C","D","E","G");
		}
		
		A:	BSPL A 0 A_Jump(256,"WaitForever");
		B:	BSPL B 0 A_Jump(256,"WaitForever");
		C:	BSPL C 0 A_Jump(256,"WaitForever");
		D:	BSPL D 0 A_Jump(256,"WaitForever");
		E:	BSPL E 0 A_Jump(256,"WaitForever");
		F:	BSPL F 0 A_Jump(256,"WaitForever");
		G:	BSPL G 0 A_Jump(256,"WaitForever");	
		W:	BSPL W 0 A_Jump(256,"WaitForever");
		X:	BSPL X 0 A_Jump(256,"WaitForever");
	
		WaitForever:
		"####" "#" 35
		{
			if (GetZAt(bloodradius,0) != floorz || GetZAt((0-bloodradius),0) != floorz || GetZAt(0,bloodradius) != floorz || GetZAt(0,(0-bloodradius)) != floorz)
			{
				A_Remove(AAPTR_DEFAULT, RMVF_EVERYTHING);
			}
			
			if (user_water != 0)
			{
				return resolvestate("null");
			}
			
			if (user_z != pos.z)
			{
				A_Warp(AAPTR_DEFAULT,0,0,frandom(0.0100000, 0.0199999),0,WARPF_NOCHECKPOSITION|WARPF_TOFLOOR);
				user_z = pos.z;
			}
			
			return resolvestate(null);
		}
		Wait;
	}
}

class BloodSplatSmall_Permanent : BloodSplat_Permanent
{	}

class BloodSplatGreen_Permanent : BloodSplat_Permanent
{	Default { StencilColor "49 9a 3d"; }	}

class BloodSplatSmallGreen_Permanent : BloodSplatSmall_Permanent
{	Default { StencilColor "49 9a 3d"; }	}

class BloodSplatBlue_Permanent : BloodSplat_Permanent
{	Default { StencilColor "0 0 80"; }	}

class BloodSplatSmallBlue_Permanent : BloodSplatSmall_Permanent
{	Default { StencilColor "0 0 80"; }	}