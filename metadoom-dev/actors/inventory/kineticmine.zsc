/*
----------------------------
MetaDoom
Actor Definitions
Kinetic Mine
----------------------------
*/

class MineDetatcherToken : _Boolean {}

class KineticMinePickup : CustomInventory
{
	Default
	{
		inventory.pickupmessage "$GOTKINMINE";
		Tag "$TAGKINMINE";
		inventory.icon "INVMINE";
		inventory.pickupsound "inventory/kineticmine/get";
		+INVENTORY.ALWAYSPICKUP
		scale 0.75;
		+BLOCKASPLAYER
		//$Category "MetaDoom Inventory Items"
		//$Title "Kinetic Mine"
		//$NotAngled
		//$Color 9
	}
	
	states
	{
	Spawn:
		KMIN Z -1;
		stop;
	Pickup:
		TNT1 A 0 
		{
			A_GiveInventory ("KineticMine", 1);
			A_GiveInventory("InventoryFuel_KineticMine", INV_COOLDOWN_GENERIC);
		}
		stop;
	}
}

class KineticMinePickupRetrieve : KineticMinePickup
{
	Default
	{
		inventory.pickupmessage "$GOTKINMINERET";
	}
	
	states
	{
	Pickup:
		TNT1 A 0 A_GiveInventory ("KineticMine", 1);
		stop;
	}
}

class KineticMine : CustomInventory
{
	Default
	{
		inventory.pickupmessage "$GOTKINMINE";
		Tag "$TAGKINMINE";
		inventory.icon "INVMINE";
		inventory.pickupsound "inventory/kineticmine/get";
		inventory.amount 1;
		inventory.maxamount 1;
		+INVENTORY.INVBAR
		scale 0.5;
	}
	
	states
	{
	Spawn:
		KMIN Z -1;
		stop;
	Use:
		TNT1 A 0
		{
			if (CountInv("InventoryFuel_KineticMine") >= INV_COOLDOWN_GENERIC)
			{
				A_FireProjectile("KineticMineProj",0,0);
				A_TakeInventory("InventoryFuel_KineticMine", 999);
			} else {
				A_PlaySound("menu/invalid");
			}
		}
		fail;
	}
}

class KineticMineProj : Actor
{
	Default
	{
		Radius 2;
		Height 8;
		Speed 10;
		Damage 0;
		PROJECTILE;
		+RANDOMIZE
		-NOGRAVITY
		+USEBOUNCESTATE
		+CORPSE
		+CANBOUNCEWATER
		-BOUNCEONFLOORS
		BounceType "Doom";
		SeeSound "inventory/throw";
		scale 0.5;
	}
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 ThrustThingZ(0,32,0,1);
		TNT1 A 0 A_PlaySound("weapons/grenadethrow");
		goto Flying;
	Flying:
		KMIN A 3 ;
		loop;
	Death:
	Bounce.Floor:
		TNT1 A 0;
		TNT1 A 0 A_SpawnItemEx("KineticMineLurkingFloor",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
		Stop;
	Bounce.Ceiling:
		TNT1 A 0;
		TNT1 A 0 
		{
			// Don't attach to the sky, you fool!
			if (ceilingpic == TexMan.CheckForTexture("F_SKY1", TexMan.Type_Flat))
			{
				SetStateLabel("Flying");
			}
		}
		TNT1 A 0 A_SpawnItemEx("KineticMineLurkingCeiling",0,0,999,0,0,0,0,SXF_TRANSFERPOINTERS);
		Stop;
	Bounce.Wall:
		TNT1 A 0 
		{
			// DrPySpy did this bit
			if(BlockingLine!=null)
			{
				Vector2 fuck1 = BlockingLine.v1.p;
				Vector2 fuck2 = BlockingLine.v2.p;
				angle = atan2(fuck2.y-fuck1.y, fuck2.x-fuck1.x);
				angle += 90;
			}
			
			// Stop the mine from attaching if the wall has a special attached.
			// This is to avoid the inevitable issues that come with being
			// attached to doors, etc.
			if(BlockingLine.special==0)
			{
				A_SpawnItemEx("KineticMineLurkingWall",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
				return ResolveState(Null); 
			} else {
				return ResolveState("Flying"); 
			}
		}
		Stop;
	}
}

class KineticMineBeepyBoop : Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		Radius 1;
		Height 1;
		scale 0.5;
	}
	
	states
	{
	Spawn:
		KMIN Y 1 BRIGHT A_FadeOut;
		loop;
	}
}

class KineticMineLurkingFloor : Actor
{
	Default
	{
		Radius 8;
		Height 8;
		scale 0.5;
		+LOOKALLAROUND
		+FRIENDLY
		+DONTTHRUST
		// This combination of flags here should (SHOULD) ultimately accomplish nothing
		// except allowing the mines to be detected by A_RadiusGive. I'm not proud...
		+SHOOTABLE
		+INVULNERABLE
		-SOLID
		+NOBLOOD
		+NOTAUTOAIMED
	}
	
	int user_fuse;
	
	States
	{
	Spawn:
		KMIN B 0;
		KMIN B 0
		{
			user_fuse = 0;
			A_RadiusGive ("MineDetatcherToken", 32, RGF_OBJECTS, 1, "KineticMineLurkingFloor");
			A_RadiusGive ("MineDetatcherToken", 32, RGF_OBJECTS, 1, "KineticMineLurkingCeiling");
			A_RadiusGive ("MineDetatcherToken", 32, RGF_OBJECTS, 1, "KineticMineLurkingWall");
		}
		KMIN B 0 A_PlaySound("inventory/kineticmine/land");
		goto ArmUp;
	ArmUp:
		"####" "#" 40;
		"####" "#" 0 A_PlaySound("inventory/kineticmine/arm");
		"####" "#" 0 A_Jump(256, "WaitMyLove"); // constant inheritance has its downsides
		goto WaitMyLove;
	WaitMyLove:
		"####" "#" 0 { user_fuse++; }
		"####" "#" 0 A_JumpIf(user_fuse == 20, "Detatch");
		"####" "#" 0 A_SpawnItemEx("KineticMineBeepyBoop",0,0,8);
		"####" "####################" 1 
		{
			A_LookEx (LOF_NOSOUNDCHECK, 0, 256, 0, 360);
			//A_JumpIfInventory("MineDetatcherToken", 1, "Detatch");
			
			if (CountInv("MineDetatcherToken") > 0)
			{
				return ResolveState("Detatch");
			} else {
				return ResolveState(null);
			}
		}
		Loop;
	See:
		"####" "#" 0 A_PlaySound("inventory/kineticmine/track");
		"####" "#" 2 Bright;
		"####" "#" 2;
		"####" "#" 0 A_PlaySound("inventory/kineticmine/track");
		"####" "#" 2 Bright;
		"####" "#" 2;
		"####" "#" 0 A_PlaySound("inventory/kineticmine/track");
		"####" "#" 2 Bright;
		"####" "#" 2;
		"####" "#" 0 A_PlaySound("inventory/kineticmine/track");
		"####" "#" 2 Bright;
		"####" "#" 2;
		"####" "#" 0 A_PlaySound("inventory/kineticmine/track");
		"####" "#" 2 Bright;
		"####" "#" 2;
		"####" "#" 0 A_Jump(256, "Kaboom");
		goto Kaboom;
	Kaboom:
		"####" "#" 0
		{
			A_FaceTarget();
			A_PlaySound("inventory/kineticmine/launch");
			A_SpawnProjectile("KineticMineLeapy",4);
		}
		Stop;
	Detatch:
		TNT1 A 0 A_PlaySound("inventory/kineticmine/detatch");
		TNT1 A 0 A_SpawnItem("KineticMinePickupRetrieve");
		Stop;
	}
}

class KineticMineLurkingCeiling : KineticMineLurkingFloor
{
	Default
	{
		Radius 8;
		Height 4;
		scale -0.5;
		+LOOKALLAROUND
		+FRIENDLY
		+NOGRAVITY
		+DONTTHRUST
	}
	
	States
	{
	Spawn:
		KMIN B 0;
		KMIN B 0
		{
			A_RadiusGive ("MineDetatcherToken", 32, RGF_OBJECTS, 1, "KineticMineLurkingFloor");
			A_RadiusGive ("MineDetatcherToken", 32, RGF_OBJECTS, 1, "KineticMineLurkingCeiling");
			A_RadiusGive ("MineDetatcherToken", 32, RGF_OBJECTS, 1, "KineticMineLurkingWall");
		}
		KMIN B 0 A_PlaySound("inventory/kineticmine/land");
		goto ArmUp;
		
	WaitMyLove:
		"####" "#" 0 { user_fuse++; }
		"####" "#" 0 A_JumpIf(user_fuse == 20, "Detatch");
		"####" "#" 0 A_SpawnItemEx("KineticMineBeepyBoop",0,0,-8);
		"####" "####################" 1 
		{
			A_LookEx (LOF_NOSOUNDCHECK, 0, 256, 0, 360);
			//A_JumpIfInventory("MineDetatcherToken", 1, "Detatch");
			
			if (CountInv("MineDetatcherToken") > 0)
			{
				return ResolveState("Detatch");
			} else {
				return ResolveState(null);
			}
		}
		Loop;
	Kaboom:
		"####" "#" 0
		{
			A_FaceTarget();
			A_PlaySound("inventory/kineticmine/launch");
			A_SpawnProjectile("KineticMineLeapy",-4);
		}
		Stop;
	}
}

class KineticMineLurkingWall : KineticMineLurkingFloor
{
	Default
	{
		Radius 8;
		Height 8;
		scale 0.5;
		+LOOKALLAROUND
		+FRIENDLY
		+WALLSPRITE
		+NOGRAVITY
		+DONTTHRUST
	}
	
	States
	{
	Spawn:
		KMIN C 0;
		KMIN B 0
		{
			A_RadiusGive ("MineDetatcherToken", 32, RGF_OBJECTS, 1, "KineticMineLurkingFloor");
			A_RadiusGive ("MineDetatcherToken", 32, RGF_OBJECTS, 1, "KineticMineLurkingCeiling");
			A_RadiusGive ("MineDetatcherToken", 32, RGF_OBJECTS, 1, "KineticMineLurkingWall");
		}
		KMIN C 0 A_PlaySound("inventory/kineticmine/land");
		goto ArmUp;
	WaitMyLove:
		"####" "#" 0 { user_fuse++; }
		"####" "#" 0 A_JumpIf(user_fuse == 20, "Detatch");
		"####" "#" 0 A_SpawnItemEx("KineticMineBeepyBoop",-4,0,0);
		"####" "####################" 1 
		{
			A_LookEx (LOF_NOSOUNDCHECK, 0, 256, 0, 360);
			//A_JumpIfInventory("MineDetatcherToken", 1, "Detatch");
			
			// If we get attached to the inner wall of a lift or a wall that's
			// moved by a button elsewhere, things can get fucky. If this happens,
			// panic and detach to ensure sanity ensures.
			if (pos.z == floorz)
			{
				return ResolveState("Detatch");
			} else {
				return ResolveState(null);
			}
			
			if (CountInv("MineDetatcherToken") > 0)
			{
				return ResolveState("Detatch");
			} else {
				return ResolveState(null);
			}
		}
		Loop;
	Kaboom:
		"####" "#" 0
		{
			A_SpawnItemEx("KineticMineLurkingWallWorkaround",-32,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
		}
		Stop;
	Detatch:
		TNT1 A 0 A_PlaySound("inventory/kineticmine/detatch");
		TNT1 A 0 A_SpawnItemEx("KineticMinePickupRetrieve",-32,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
		Stop;
	}
}

// uggh, gross
class KineticMineLurkingWallWorkaround : Actor
{
	Default
	{
		+NOGRAVITY
	}
	
	States
	{
		Spawn:
		TNT1 A 0;
		TNT1 A 0
		{
			A_FaceTarget();
			A_PlaySound("inventory/kineticmine/launch");
			A_SpawnProjectile("KineticMineLeapy",4);
		}
		Stop;
	}
}

class KineticMineLeapy : Actor
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 20;
		Damage 20;
		Projectile;
		+RANDOMIZE
		Obituary "$OB_KINMINE";
		Decal "Scorch";
	}
	
	States
	{
	Spawn:
		KMIS A 0 A_SpawnItem ("RocketTrailSmoke", 0, 6, 0, 0);
		KMIS AA 1 Bright;
		Loop;
	Death:
		TNT1 A 0 A_SpawnItemEx("MetaExplosion",0,0,24,0,0,0,0,SXF_TRANSFERPOINTERS);
		Stop;
	}
}