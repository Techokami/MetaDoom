/*
----------------------------
MetaDoom
Actor Definitions
Shield Wall
----------------------------
*/

class ShieldWallPickup : CustomInventory
{
	Default
	{
		inventory.pickupmessage "$GOTSHIELDWALL";
		Tag "$TAGSHIELDWALL";
		inventory.icon "INVSHLD";
		inventory.pickupsound "inventory/shieldwall/get";
		+INVENTORY.ALWAYSPICKUP
		//scale 0.5
		+BLOCKASPLAYER
		//$Category "MetaDoom Inventory Items"
		//$Title "Shield Wall"
		//$NotAngled
		//$Color 9
	}
	states
	{
	Spawn:
		SHLD Z -1;
		stop;
	Pickup:
		TNT1 A 0 
		{
			A_GiveInventory ("ShieldWall", 1);
			A_GiveInventory("InventoryFuel_ShieldWall", INV_COOLDOWN_SHIELD);
		}
		stop;
	}
}

class ShieldWall : CustomInventory
{
	Default
	{
		inventory.pickupmessage "$GOTSHIELDWALL";
		Tag "$TAGSHIELDWALL";
		inventory.icon "INVSHLD";
		inventory.pickupsound "inventory/shieldwall/get";
		inventory.amount 1;
		inventory.maxamount 1;
		+INVENTORY.INVBAR
		scale 0.5;
	}
	states
	{
	Spawn:
		SHLD Z -1;
		stop;
	Use:
		TNT1 A 0
		{
			if (CountInv("InventoryFuel_ShieldWall") >= INV_COOLDOWN_SHIELD)
			{
				A_FireProjectile("ShieldWallProj",0,0,0,0,FPF_NOAUTOAIM);
				A_TakeInventory("InventoryFuel_ShieldWall", 999);
			} else {
				A_PlaySound("menu/invalid");
			}
		}
		fail;
	}
}

class ShieldWallProj : Actor
{
	Default
	{
		+CANBOUNCEWATER
		Radius 8;
		Height 8;
		Speed 15;
		Damage 0;
		PROJECTILE;
		+RANDOMIZE
		-NOGRAVITY
		+USEBOUNCESTATE
		+ROLLSPRITE
		SeeSound "inventory/throw";
		Obituary "$OB_MPGRENADE";
		scale 0.5;
		ReactionTime 60;	//Just over five seconds
	}
	
	FLineTraceData SurfaceData;
	
	States
	{
	Spawn:
		TNT1 A 0;
		TNT1 A 0 ThrustThingZ(0,32,0,1);
		TNT1 A 0 A_PlaySound("weapons/grenadethrow");
		goto Flying;
	Flying:
		SHLD Y 1;
		loop;
	Death:
		TNT1 A 0 A_SetAngle(angle + 90);
		TNT1 A 0 
		{	
			A_PlaySound("inventory/shieldwall/start");
			
			A_SpawnItemEx("ShieldWallPiece",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
			A_SpawnItemEx("ShieldWallHilight",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
			
			// Only spawn the other bits if there's room for them
			self.LineTrace(angle, 16, 0, TRF_THRUACTORS, offsetz: 8, data:SurfaceData);
			if (SurfaceData.HitType != SurfaceData.TRACE_HitWall)
			{
				A_SpawnItemEx("ShieldWallPiece",16,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
				A_SpawnItemEx("ShieldWallHilight",16,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
			}
			
			self.LineTrace(angle+180, 16, 0, TRF_THRUACTORS, offsetz: 8, data:SurfaceData);
			if (SurfaceData.HitType != SurfaceData.TRACE_HitWall)
			{
				A_SpawnItemEx("ShieldWallPiece",-16,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
				A_SpawnItemEx("ShieldWallHilight",-16,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
			}
		}
		Stop;
	}
}

// Shield Wall - Useful Edition!
class ShieldWallPiece : Actor
{
	Default
	{
		Radius 16;
		Height 56;
		+SOLID
		+WALLSPRITE
		+NOGRAVITY
		renderstyle "Shaded";
		StencilColor "89 f0 ff";
	}
	
	int lifespan;
	color playercolor;
	
	States
	{
	Spawn:
		SHWA A 0;
		SHWA A 0
		{
			A_SetAngle(angle + 90);
			A_PlaySound("inventory/shieldwall/loop",6,1,1);
		}
	LifeSpan:
		SHWA AB 4 BRIGHT;
		SHWA A 0 { lifespan++; }
		SHWA A 0 A_JumpIf(lifespan == 32, "Die");
		Loop;
	Die:
		SHWA A 0 
		{
			A_PlaySound("inventory/shieldwall/end",6);
			
			for (int i; i < 12; i++)
			{
				// Spawn particles using the player's colour for consistency
				A_SpawnParticle(playercolor,SPF_RELATIVE|SPF_FULLBRIGHT,random(8,56),random(3,8),0,random(-8,8),random(-8,8),random(8,52),0,0,0,0,0,-0.1);
			}
			
		}
		TNT1 A 0;
		stop;
	}
	
	// Get the player's colour, store it away for the death particles, and
	// apply it to the object itself.
	override void PostBeginPlay ()
	{
		Super.PostBeginPlay ();
		
		playercolor = "89 f0 ff";
		
		// Set the Shield Wall's colour to the spawning player's colour.
		// Thanks to Comet for giving me a hint on this!
		if (target is "PlayerPawn")
		{
			playercolor = target.Player.GetColor();
			SetShade(playercolor);
		}
	}
	
	// Ignore player shots, but still block the enemy's
	override bool CanCollideWith(Actor other, bool passive)
	{
		// Handle player collisions, or lack thereof.
		if (deathmatch && other == target)
		{
			return false;
		}
		
		if (!deathmatch && other is "MetaDoomPlayer")
		{
			return false;
		}
		
		// Different deathmatch handling to differentiate between different
		// players. In co-op, everyone should be able to shoot through to
		// reduce frustration and/or trolling...
		if (deathmatch)
		{
			if (passive && other.target == self.target && !other.bISMONSTER)
			{
				return false;
			} 
		} else {
			if (passive && other.target is "MetaDoomPlayer" && !other.bISMONSTER)
			{
				return false;
			}
		}
		return true;
	}
}

// Since actors with a Shaded renderstyle don't really have a lot of contrast
// so we spawn another actor with the highlights using additive renderstyle for
// added consistency. Somehow the z-sorting just works out...
class ShieldWallHilight : Actor
{
	Default
	{
		-SOLID
		+NOINTERACTION
		+WALLSPRITE
		+NOGRAVITY
		renderstyle "Add";
	}
	
	int lifespan;
	
	States
	{
	Spawn:
		SHWA A 0;
		SHWA A 0 A_SetAngle(angle + 90);
	LifeSpan:
		SHWA CD 4 BRIGHT;
		SHWA A 0 { lifespan++; }
		SHWA A 0 A_JumpIf(lifespan == 32, "Die");
		Loop;
	Die:
		TNT1 A 0;
		stop;
	}
}