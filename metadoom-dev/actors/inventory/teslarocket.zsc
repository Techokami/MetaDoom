/*
----------------------------
MetaDoom
Actor Definitions
Tesla Rocket
----------------------------
*/

class TeslaRocketPickup : CustomInventory
{
	Default
	{
		inventory.pickupmessage "$GOTTESLA";
		Tag "$TAGTESLA";
		inventory.icon "INVTESL";
		inventory.pickupsound "inventory/teslarocket/get";
		+INVENTORY.ALWAYSPICKUP
		scale 0.5;
		+BLOCKASPLAYER
		//$Category "MetaDoom Inventory Items"
		//$Title "Tesla Rocket"
		//$NotAngled
		//$Color 9
	}
	
	states
	{
	Spawn:
		TSLA Z -1;
		stop;
	Pickup:
		TNT1 A 0 
		{
			A_GiveInventory ("TeslaRocket", 1);
			A_GiveInventory("InventoryFuel_TeslaRocket", INV_COOLDOWN_SIPHON);
		}
		stop;
	}
}

class TeslaRocket : CustomInventory
{
	Default
	{
		inventory.pickupmessage "$GOTTESLA";
		Tag "$TAGTESLA";
		inventory.icon "INVTESL";
		inventory.pickupsound "inventory/grenade/get";
		inventory.amount 1;
		inventory.maxamount 1;
		+INVENTORY.INVBAR
		scale 0.5;
	}
	
	states
	{
	Spawn:
		TSLA Z -1;
		stop;
	Use:
		TNT1 A 0
		{
			if (CountInv("InventoryFuel_TeslaRocket") >= INV_COOLDOWN_SIPHON)
			{
				A_PlaySound ("inventory/teslarocket/throw");
				A_FireProjectile("TeslaRocketProj",0,0,0,0,FPF_NOAUTOAIM | CMF_TRACKOWNER);
				A_TakeInventory("InventoryFuel_TeslaRocket", 999);
			} else {
				A_PlaySound("menu/invalid");
			}
		}
		fail;
	}
}

class TeslaRocketProj : Actor
{
	Default
	{
		Radius 11;
		Height 8;
		Speed 10;
		DamageFunction (5);
		Projectile;
		+RANDOMIZE
		+RIPPER
		scale 0.5;
		Obituary "$OB_TESLA";
		Decal "CacoScorch";
	}
	
	States
	{
	Spawn:
		TSLA A 0 A_PlaySound ("inventory/teslarocket/loop", CHAN_BODY, 1.0, 1);
		TSLA ACBC 1 Bright 
		{
			A_SpawnItem("TeslaZapperTrail",random(-8,8),random(-8,8));
			A_SpawnProjectile("TeslaZapper", -4, 0, 0, CMF_AIMDIRECTION | CMF_TRACKOWNER);
		}
		Loop;
	Death:
		TNT1 A 0 A_SpawnItemEx("TeslaRocketExplosion",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
		Stop;
	}
}

// More Tesla Rockets, with grody workarounds
class TeslaZapper : Actor
{
	Default
	{
		Radius 2;
		Height 2;
		Speed 0;
		MinMissileChance 0;
		Projectile;
		+LOOKALLAROUND
		+NOINTERACTION
		//+ISMONSTER
		+SEEKERMISSILE
		//+FRIENDLY
		RenderStyle "Add";
		RenderStyle "Add";
		Obituary "$OB_TESLA";
		AttackSound "weapons/bfg/spray";
		MissileHeight 0;
	}
	
	States
	{
	Spawn:
		TNT1 A 1 NoDelay A_SeekerMissile(0,0,SMF_CURSPEED|SMF_LOOK,256);
		Goto See;
	See:
		TNT1 A 1
		{
			if (FetchDistance(1,AAPTR_TRACER) <= 256)
			{
				if(tracer!=null)
				{
					A_PlaySound("weapons/bfg/spray");
					tracer.DamageMobj(target,target,3,'Tesla',0,AngleTo(tracer)); //directly damages the tracer, attributing the damage to the projectile's owner
				}
				target = tracer; //we don't need the owner anymore, but we do need the target to shoot this laser effect at
				A_CustomRailgun(0, 0, "", "", RGF_SILENT | RGF_NOPIERCING, 1, 0, "TeslaZapperTrail", 0, 0, 256, 0, 4, 0, "TeslaZapperTrail");
			}
		}
		Goto Death;
	Death:
		TNT1 A 0;
		Stop;
	}
	
	// Just a renamed, un-depreciated GetDistance() to remove a depreciation
	// error I don't have time to properly fix. Next time, Gadget.
	double FetchDistance(bool checkz, int ptr = AAPTR_TARGET) const
	{
		let target = GetPointer(ptr);

		if (!target || target == self)
		{
			return 0;
		}
		else
		{
			let diff = Vec3To(target);
			if (checkz)
				diff.Z += (target.Height - self.Height) / 2;
			else
				diff.Z = 0.;

			return diff.Length();
		}
	}
}

class TeslaZapperTrail : Actor
{
	Default
	{
		//Renderstyle Add
		Alpha 0.75;
		Scale 0.5;
		+NOINTERACTION
		damagetype "Tesla";
	}
	
	States
	{
	Spawn:
		TSPK A 2 Bright;
		TSPK B 1 Bright;
		Stop;
	}
}

class TeslaRocketExplosion : MetaExplosion
{
	Default
	{
		//scale 0.5
		Obituary "$OB_TESLA";
	}
	
	States
	{
		Spawn:
		EXPL A 0;
		BAL2 C 4 BRIGHT
		{
			A_PlaySound("inventory/teslarocket/explode", CHAN_WEAPON);
			A_Explode(72,128);
			A_Quake (3,5,0,750,0);
			A_SpawnItem("ShockwaveSmall");
		}
		BAL2 D 3 BRIGHT;
		BAL2 E 2 BRIGHT;
		Stop;
	}
}