/*
----------------------------
MetaDoom
Actor Definitions
Flame Belch
----------------------------
*/

// Seperate GFX for Codex
class FlameBelchDummy : Actor
{
	States
	{
	Spawn:
		FBLC Y -1;
		loop;
	}
}

class FlameBelchPickup : CustomInventory
{
	Default
	{
		inventory.pickupmessage "$GOTFLAMEBELCH";
		Tag "$TAGFLAMEBELCH";
		inventory.icon "INVBLCH";
		inventory.pickupsound "inventory/flamebelch/get";
		+INVENTORY.ALWAYSPICKUP;
		+BLOCKASPLAYER;
		//$Category "MetaDoom Inventory Items"
		//$Title "Frag Grenade"
		//$NotAngled
		//$Color 9
	}
	
	states
	{
	Spawn:
		FBLC Z -1;
		stop;
	Pickup:
		TNT1 A 0 
		{
			A_GiveInventory ("FlameBelch", 1);
			A_GiveInventory("InventoryFuel_FlameBelch", INV_COOLDOWN_GENERIC);
		}
		stop;
	}
}

class FlameBelch : CustomInventory
{
	Default
	{
		inventory.pickupmessage "$GOTFLAMEBELCH";
		Tag "$TAGFLAMEBELCH";
		inventory.icon "INVBLCH";
		inventory.pickupsound "inventory/flamebelch/get";
		inventory.amount 1;
		inventory.maxamount 1;
		+INVENTORY.INVBAR
		scale 0.5;
	}
	
	states
	{
	Spawn:
		FBLC Z -1;
		stop;
	Use:
		TNT1 A 0
		{
			if (CountInv("InventoryFuel_FlameBelch") >= INV_COOLDOWN_GENERIC)
			{
				A_FireProjectile("FlameBelchAttack",0, 0, 0, CMF_TRACKOWNER);
				A_TakeInventory("InventoryFuel_FlameBelch", 999);
			} else {
				A_PlaySound("menu/invalid");
			}
		}
		fail;
	}
}

// Based on "FlashlightInterpBug.pk3" by DrPySpy
Class FlameBelchAttack : Actor
{
	Default
	{
		-NOGRAVITY
		-INVISIBLE
		RenderRadius 512;
	}
	
	override void Tick()
	{
        A_Warp(AAPTR_TARGET,0,0,48,0,WARPF_NOCHECKPOSITION|WARPF_INTERPOLATE|WARPF_COPYPITCH);
		Super.Tick();  
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay A_StartSound("inventory/flamebelch/fire", 451, 0, 1.0, ATTN_NORM, 1.0);
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 
			{
				target.A_SpawnProjectile("FlameBelchFire", 48, -16, 0, CMF_TRACKOWNER|CMF_AIMDIRECTION, target.pitch);
			}
			Stop;
	}
}

// Imported from Reelism 2, which was imported from FauxDM...
Class FlameBelchFire : CustomProj
{
	Default
	{
		Radius 10;
		Height 10;
		CustomProj.RadiusScale 0.0;
		CustomProj.HeightScale 0.0;
		CustomProj.RadiusScaleFactor 0.03;
		CustomProj.HeightScaleFactor 0.03;
		
		CustomProj.CustomDamage 5;
		DamageType "Fire";
		CustomProj.SplashDamage 10;
		CustomProj.SplashRadiusScale 1.3;
		
		CustomProj.DOTItem "MetaBurnDOT";
		CustomProj.AOEActor "MetaFireAOE";
		
		Scale 0.1;
		CustomProj.XScaleFactor 0.0;
		CustomProj.YScaleFactor 0.0;
		
		Speed 25;
		RenderStyle "Add";
		Obituary "$OB_FLAMEBELCH";
		
		+FORCEXYBILLBOARD
		+DONTSPLASH
		+NoGravity
		+Missile
		+ROLLSPRITE
		+ROLLCENTER
	}
	
	int dir;
	int dottimer;
	
	States
	{
	Spawn:
		FTHR A 0 NoDelay
		{
			self.vel.xy += target.vel.xy;
		}
	SpawnLoop:
		FTHR A 0
		{
			dir = random(0,1);
			roll = random(0,360);
		}
		goto Start;
	Start:
		FTHR ABCD 1 BRIGHT
		{
			if (dir == 1)
			{
				roll = roll + 4;
			} else {
				roll = roll - 4;
			}
			
			A_SetScale(scale.x + 0.01);
			A_ScaleVelocity (0.5);
		}
		goto Looper;
	Looper:
		FTHR ABCD 1 BRIGHT
		{
			if (dir == 1)
			{
				roll = roll + 4;
			} else {
				roll = roll - 4;
			}
			
			A_SetScale(scale.x + 0.02);
			
			A_FadeOut(0.03);
		}
		Loop;
	Death:
		// Basically, always have the FireAOE spawn on hitting the ground, but
		// have a small chance of it spawning when hitting walls.
		TNT1 A 0 A_Jump(200, "XDeath");
		TNT1 A 0 
		{
			if (A_SpawnAreaOfEffect() == false)
			{
				A_SpawnItemEx("MetaFireAOE",0,0,0,0,0,0,0,SXF_TRANSFERPOINTERS);
			}
		}
		stop;
	XDeath:
		TNT1 A 0 A_SpawnAreaOfEffect();
		Stop;
	}
	
	override void Tick()
	{
		Super.Tick();
		
		dottimer++;
		
		if (dottimer >= 6)
		{
			A_SpawnParticle("ffff9c", SPF_FULLBRIGHT, 35, 1, Random(0,255), 0, 0, 0, Random(0,1), Random(0,1), Random(2,6), 0, 0, 0, 1.0, -1, 0.3);
			dottimer = 0;
		}
		
		if (waterlevel > 0 || (pos.z == GetZAt() && (GetFloorTerrain().TerrainName == "Water" || GetFloorTerrain().TerrainName == "FakeWater")))
		{
			A_StartSound("inventory/flamebelch/sizzle");
			A_SpawnItem("MetaExtinguishSmokeGenerator");
			self.Destroy();
		}
	}
}

class MetaBurnDOT : CustomDOT
{
	Default
	{
		DamageFunction (5);
		DamageType "Fire";
		
		CustomDOT.NumberOfTics 3;
		CustomDOT.Duration 3;
		CustomDOT.MaxTotalDOTs 3;
		CustomDOT.EffectSpawnRate 0.01;
		CustomDOT.StackType "Stackable";
		CustomDOT.DamageApplication "Delayed";
		CustomDOT.EffectActor "MetaFlameEffect";
		
		Obituary "$OB_FLAMETHROWER_DOT";
	}
}

class MetaFlameEffect : DOTEffect
{
	Default
	{
		DOTEffect.NoWarp true;
		
		RenderStyle "Add";
		Alpha 0.75;
		Scale 0.5;
		+DONTSPLASH
	}
	
	double crackvolume;
	
	States
	{
		Spawn:
			FTRA A 0;
			FTRA A 0 { crackvolume = 0.25; }
			FTRA ABCDEFGHIJK 1 Bright;
			Stop;
	}
	
	override void Tick()
	{
		super.Tick();
		
		crackvolume - 0.1;
		
		A_StartSound("inventory/flamebelch/crak",CHAN_BODY,0,crackvolume,ATTN_NORM,frandom(0.5,1));
	}
}

// Copy for use in death sequences
class MetaFlameDeathEffect : Actor
{
	Default
	{
		RenderStyle "Add";
		Alpha 0.75;
		Scale 0.5;
		+DONTSPLASH
		+NOBLOCKMAP
		+NOGRAVITY
	}
	
	double crackvolume;
	
	States
	{
		Spawn:
			FTRA A 0;
			FTRA A 0 { crackvolume = 0.25; }
			FTRA ABCDEFGHIJK 1 Bright;
			Stop;
	}
	
	override void Tick()
	{
		super.Tick();
		
		crackvolume - 0.1;
		
		A_StartSound("inventory/flamebelch/crak",CHAN_BODY,0,crackvolume,ATTN_NORM,frandom(0.5,1));
	}
}

class MetaFireAOE : CustomAOE
{
	Default
	{
		Radius 16;
		Height 24;
		Damage 5;
		DamageType "Fire";
		
		CustomAOE.CoolDown 0.25;
		CustomAOE.DOTItem "MetaBurnDOT";
		CustomAOE.EffectSpawnRate 0.1;
		CustomAOE.EffectActor "MetaGroundFireFlame";
		
		+DONTSPLASH
		-NOGRAVITY
	}
	
	States
	{
		Spawn:
			TNT1 A 70;
			Stop;
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
				
		if (pos.z == GetZAt() && GetFloorTerrain().IsLiquid)
		{
			A_StartSound("inventory/flamebelch/sizzle");
			A_SpawnItem("MetaExtinguishSmokeGenerator");
			Destroy();
			return;
		}
	}
		
	override void Tick()
	{
		super.Tick();
		
		if (waterlevel > 0 || (pos.z == GetZAt() && (GetFloorTerrain().TerrainName == "Water" || GetFloorTerrain().TerrainName == "FakeWater")))
		{
			A_StartSound("inventory/flamebelch/sizzle");
			A_Remove(AAPTR_DEFAULT,RMVF_EVERYTHING);
			A_SpawnItem("MetaExtinguishSmokeGenerator");
		}
	}
	
}

class MetaGroundFireFlame : Actor
{
	Default
	{
		RenderStyle "Add";
		Alpha 0.9;
		Scale 0.5;
		
		+DONTSPLASH
		+NOINTERACTION
	}
	
	States
	{
		Spawn:
			FFLA ABCDEFGHIJKLMN 2 Bright;
			Stop;
	}
	
	override void Tick()
	{
		super.Tick();
		
		if (isFrozen() || level.isFrozen())
			return;
		
		scale.x -= min(0.02, scale.x);
		scale.y -= min(0.02, scale.y);
		
		A_StartSound("inventory/flamebelch/crak",CHAN_BODY,0,(scale.x / 2),ATTN_NORM,frandom(0.1,0.5));
		
		if (waterlevel > 0)
		{
			A_StartSound("inventory/flamebelch/sizzle");
			A_Remove(AAPTR_DEFAULT,RMVF_EVERYTHING);
			A_SpawnItem("MetaExtinguishSmokeGenerator");
		}
	}
}

class MetaExtinguishSmoke : Actor
{
	Default
	{
		+NOBLOCKMAP
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+ZDOOMTRANS
		+DONTSPLASH
		RenderStyle "Translucent";
		Alpha 0.5;
		VSpeed 1;
		Mass 5;
		Scale 2;
	}
	States
	{
	Spawn:
		PUFF C 1 A_FadeOut(0.01);
		loop;
	}
}

class MetaExtinguishSmokeGenerator : Actor
{
	Default
	{
		+NOGRAVITY
		+DONTSPLASH
	}
	States
	{
	Spawn:
		TNT1 AAAAAAAAAAAAA 1
		{
			// Check to see if the smoke will spawn at roughly the same height
			// as the smoke generator. If it's too high up, re-roll the RNG
			// until you get a position that works.
			
			// This prevents fire from spawning on top of taller adjacent sectors.
			
			bool okfire = false;
			while (okfire == false)
			{
				int randomx = random(-32,32);
				int randomy = random(-32,32);
				if (GetZAt(randomx,randomy) <= GetZAt()+16 && GetZAt(randomx,randomy) >= GetZAt())
				{
					A_SpawnItemEx("MetaExtinguishSmoke", randomx, randomy, 0,0,0,2);
					okfire = true;
				}
			}
		}
		stop;
	}
}