/*
----------------------------
MetaDoom
ACS Scripting
General ACS Garbage
----------------------------
*/
#library "metadoom"
#include "zcommon.acs"

// Global Variables
global int 1:mapsCleared;
world int 6:item_KeyType;
world int 7:item_SkullKeyType;

////////////////////////////////////////////////////////////////////////////////
// Health Warning Message
////////////////////////////////////////////////////////////////////////////////

// Display a warning message if the player goes under 25 health
Script "HealthWarning_Warn" ENTER
{
	if (GetActorProperty (0, APROP_HEALTH) <= 25 && !CheckInventory("PlayerHealthWarning"))
	{
		LocalAmbientSound("player/healthwarning", 127);
		GiveInventory("PlayerHealthWarning", 1);
		SetHudSize(320,200,1);
		SetFont("SmallFont");
		HudMessage(l:"LOWHEALTHWARNING"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 155.0, 1.0, 0.01, 1.0);
		delay(1);
		HudMessage(l:"LOWHEALTHWARNING"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 145.0, 1.0, 0.01, 1.0);
		delay(1);
		HudMessage(l:"LOWHEALTHWARNING"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 153.0, 1.0, 0.01, 1.0);
		delay(1);
		HudMessage(l:"LOWHEALTHWARNING"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 150.0, 1.0, 0.01, 1.0);
	}
	delay(1);
	restart;
}

// Make the player qualify for the message again if they go back above 25 health.
Script "HealthWarning_Clear" ENTER
{
	if (GetActorProperty (0, APROP_HEALTH) > 25 && CheckInventory("PlayerHealthWarning"))
	{
		TakeInventory("PlayerHealthWarning", 999);
	}
	delay(1);
	restart;
}

////////////////////////////////////////////////////////////////////////////////
// Melee System
////////////////////////////////////////////////////////////////////////////////

// Make the player throw hands on a key press.
Script "MeleePunch" (void) net
{
	GiveInventory("MeleePunch", 1);
	delay(2);
	TakeInventory("MeleePunch", 999);
}

// Govern non-retro berserkery.
Script "MeleeHandleBerserk" ENTER
{
	If (!CheckInventory("PowerMetaBerserkTimer") && CheckInventory("MetaBerserkFist") && !GetCvar("meta_retroberserk"))
	{
		TakeInventory("MetaBerserkFist", 999);
	}
	delay(1);
	restart;
}

// Remove the berserk powerup(s) on starting a new map.
Script "MeleeStripBerserkOnStart" ENTER
{
	TakeInventory("MetaBerserkFist", 999);
	TakeInventory("PowerMetaBerserkTimer", 999);
	TakeInventory("PowerStrength", 999);
}

////////////////////////////////////////////////////////////////////////////////
// Weapon Shortcuts
////////////////////////////////////////////////////////////////////////////////

// Quick-select the Holy Water Pistol
Script "QuickSelect_HWP" (void) net
{
	If (CheckInventory("MetaHolyWaterPistol"))
	{
		 SetWeapon("MetaHolyWaterPistol");
	}
}

// Quick Select the Fire Extinguisher
Script "QuickSelect_FireEx" (void) net
{
	If (CheckInventory("MetaFireExtinguisher"))
	{
		 SetWeapon("MetaFireExtinguisher");
	}
}

// Quick Select the Soulcube (Is this needed?)
Script "QuickSelect_SoulCube" (void) net
{
	If (CheckInventory("MetaSoulCube"))
	{
		 SetWeapon("MetaSoulCube");
	}
}

////////////////////////////////////////////////////////////////////////////////
// The Artifact
////////////////////////////////////////////////////////////////////////////////

// Handles the Artifact's slow-motion effect. Blatantly ripped from High Noon Drifter.
// TODO: Replace with ZScript version from Kizoky's Postal 2 TC?
script "MetaBulletTime" ENTER
{
	int drawtimer;

	while(true)
    {
		if (CheckInventory("ArtifactTimer") > 0)
		{
			drawtimer++;

			if (drawtimer < 8) { GiveInventory("PowerTimeFreezerSound",1); }
			else { TakeInventory("PowerTimeFreezerSound",1); drawtimer = 0; }
			TakeInventory("ArtifactTimer",1);
			
			if (CheckInventory("ArtifactTimer") < 52 && !CheckInventory("ArtifactSoundToken"))
			{ 
				AmbientSound("inventory/artifact/off", 127);
				GiveInventory("ArtifactSoundToken", 1);
			}
		}
		else
		{
			drawtimer = 0;
			TakeInventory("ArtifactSoundToken",999);
			TakeInventory("PowerTimeFreezerSound",999);
		}	
		delay(1);
	}
}

// This was originally part of the stripping the 100% cleared markers.
// I'm not sure why. I blame last-minute hotfixes.
Script "StripSlowMoOnStart" ENTER
{
	TakeInventory("ArtifactTimer", 999);
}

////////////////////////////////////////////////////////////////////////////////
// Traditional Pistol Handling
////////////////////////////////////////////////////////////////////////////////

// Set the player up for having a pistol that can't be shot forever and a day
script "PistolAmmoStart" ENTER
{
	if(GetCvar("meta_pistolammo") && !CheckInventory("PistolAmmoCoupon"))
	{
		GiveInventory("Clip", 50);
		GiveInventory("PistolAmmoCoupon", 1);
	}
}

////////////////////////////////////////////////////////////////////////////////
// 100% Cleared Messages
////////////////////////////////////////////////////////////////////////////////

// This mess handles the detection and printing of everything.
Script "100Percent" ENTER
{
	if (GameType () < 2) // disqualities deathmatch and titlemap
	{
		if (!CheckInventory("x100Percent_Monsters") & !CheckInventory("x100Percent_Running") & (GetLevelInfo (LEVELINFO_KILLED_MONSTERS) == GetLevelInfo (LEVELINFO_TOTAL_MONSTERS)) & (GetLevelInfo (LEVELINFO_TOTAL_MONSTERS) != 0))
		{
			GiveInventory("x100Percent_Running", 1);
			GiveInventory("x100Percent_Monsters", 1);
			if (GetCvar("meta_toasttype") == 1)
			{
				LocalAmbientSound("menu/100percent2", 127);
				Log(s:"\cfAll Monsters Cleared! 10,000 Point Bonus!");
				GiveInventory("ScoreItem", 10000);
				delay(40);
				TakeInventory("x100Percent_Running", 1);
			} else {
				SetHudSize((320 * GetCvar("meta_toastsize")),(200 * GetCvar("meta_toastsize")),1);
				SetFont("100TOAST");
				HudMessage(s:"A"; HUDMSG_FADEINOUT, 10, CR_RED, (160.0 * GetCvar("meta_toastsize")), (36.0 * GetCvar("meta_toastsize")), 2.0, 0.45, 1.0);
				delay(17);
				LocalAmbientSound("menu/100percent", 127);
				delay(4);
				SetFont("DBIGFONT");
				HudMessage(l:"100_MONSTERS"; HUDMSG_FADEINOUT, 0, CR_RED, (160.0 * GetCvar("meta_toastsize")), (32.0 * GetCvar("meta_toastsize")), 2.0, 0.01, 1.0);
				SetFont("SmallFont");
				HudMessage(s:"10,000 Point Bonus!"; HUDMSG_FADEINOUT, 5, CR_RED, (160.0 * GetCvar("meta_toastsize")), (45.0 * GetCvar("meta_toastsize")), 2.0, 0.01, 1.0);
				GiveInventory("ScoreItem", 10000);
				delay(80);
				TakeInventory("x100Percent_Running", 1);
			}
		} 
		if (!CheckInventory("x100Percent_Items") & !CheckInventory("x100Percent_Running") & (GetLevelInfo (LEVELINFO_FOUND_ITEMS) == GetLevelInfo (LEVELINFO_TOTAL_ITEMS)) & (GetLevelInfo (LEVELINFO_TOTAL_ITEMS) != 0))
		{
			GiveInventory("x100Percent_Running", 1);
			GiveInventory("x100Percent_Items", 1);
			if (GetCvar("meta_toasttype") == 1)
			{
				LocalAmbientSound("menu/100percent2", 127);
				Log(s:"\cfAll Items Found! 5,000 Point Bonus!");
				GiveInventory("ScoreItem", 5000);
				delay(40);
				TakeInventory("x100Percent_Running", 1);
			} else {
				SetHudSize((320 * GetCvar("meta_toastsize")),(200 * GetCvar("meta_toastsize")),1);
				SetFont("100TOAST");
				HudMessage(s:"A"; HUDMSG_FADEINOUT, 10, CR_RED, (160.0 * GetCvar("meta_toastsize")), (36.0 * GetCvar("meta_toastsize")), 2.0, 0.45, 1.0);
				delay(17);
				LocalAmbientSound("menu/100percent", 127);
				delay(4);
				SetFont("DBIGFONT");
				HudMessage(l:"100_ITEMS"; HUDMSG_FADEINOUT, 0, CR_RED, (160.0 * GetCvar("meta_toastsize")), (32.0 * GetCvar("meta_toastsize")), 2.0, 0.01, 1.0);
				SetFont("SmallFont");
				HudMessage(s:"5000 Point Bonus!"; HUDMSG_FADEINOUT, 5, CR_RED, (160.0 * GetCvar("meta_toastsize")), (45.0 * GetCvar("meta_toastsize")), 2.0, 0.01, 1.0);
				GiveInventory("ScoreItem", 5000);
				delay(80);
				TakeInventory("x100Percent_Running", 1);
			}
		}
		if (!CheckInventory("x100Percent_Secrets") & !CheckInventory("x100Percent_Running") & (GetLevelInfo (LEVELINFO_FOUND_SECRETS) == GetLevelInfo (LEVELINFO_TOTAL_SECRETS)) & (GetLevelInfo (LEVELINFO_TOTAL_SECRETS) != 0))
		{
			GiveInventory("x100Percent_Running", 1);
			GiveInventory("x100Percent_Secrets", 1);
			if (GetCvar("meta_toasttype") == 1)
			{
				LocalAmbientSound("menu/100percent2", 127);
				Log(s:"\cfAll Secrets Uncovered! 10,000 Point Bonus!");
				GiveInventory("ScoreItem", 10000);
				delay(40);
				TakeInventory("x100Percent_Running", 1);
			} else {
				SetHudSize((320 * GetCvar("meta_toastsize")),(200 * GetCvar("meta_toastsize")),1);
				SetFont("100TOAST");
				HudMessage(s:"A"; HUDMSG_FADEINOUT, 10, CR_RED, (160.0 * GetCvar("meta_toastsize")), (36.0 * GetCvar("meta_toastsize")), 2.0, 0.45, 1.0);
				delay(17);
				LocalAmbientSound("menu/100percent", 127);
				delay(4);
				SetFont("DBIGFONT");
				HudMessage(l:"100_SECRETS"; HUDMSG_FADEINOUT, 0, CR_RED, (160.0 * GetCvar("meta_toastsize")), (32.0 * GetCvar("meta_toastsize")), 2.0, 0.01, 1.0);
				SetFont("SmallFont");
				HudMessage(s:"10,000 Point Bonus!"; HUDMSG_FADEINOUT, 5, CR_RED, (160.0 * GetCvar("meta_toastsize")), (45.0 * GetCvar("meta_toastsize")), 2.0, 0.01, 1.0);
				GiveInventory("ScoreItem", 10000);
				delay(80);
				TakeInventory("x100Percent_Running", 1);
			}
		}
		Delay(1);
		restart;
	}
}

// Clear everything at the start of a new map to avoid problems.
Script "Strip100PercentOnStart" ENTER
{
	TakeInventory("x100Percent_Monsters", 999);
	TakeInventory("x100Percent_Items", 999);
	TakeInventory("x100Percent_Secrets", 999);
	TakeInventory("x100Percent_Running", 999);
}
		

////////////////////////////////////////////////////////////////////////////////
// Holy Water Pistol
////////////////////////////////////////////////////////////////////////////////

// Handles the mechanical side of detecting that the player is sitting in fluids
// (ooh-er) and giving them Holy Water Pistol ammo. The cosmetic side has been
// transitioned to ZScript. This should be as well at some vague point.
Script "TakeWater" ENTER
{
	str fluidtex_take[37] =
	{ 
		"FWATER1","FWATER2","FWATER3","FWATER4",
		"SLIME01","SLIME02","SLIME03","SLIME04",
		"SLIME05","SLIME06","SLIME07","SLIME08",
		"NUKAGE1","NUKAGE2","NUKAGE3","BLOOD1",
		"BLOOD2","BLOOD3",
		// PSX Doom
		"WATER01","BSLIME01","CSLIME01",
		// Doom 64
		"D64B1_01","D64B2_01","D64BLOD1","D64N1_01",
		"D64N2_01","D64NUKG1","D64NUKG2","D64S1_01",
		"D64S2_01","D64SLDG1","D64SLDG2","D64W1_01",
		"D64W2_01","D64WATR1","D64WATR2",
		// BTSX
		"FWATER02"
	};
	
	if (CheckInventory("MetaHolyWaterPistol") && GetActorZ (0) == GetActorFloorZ (0)
	    && GetActorProperty (0, APROP_Health) > 0 && CheckInventory("HolyWater") < 15)
	{
		for (int i = 0; i < 37; i++)
		{
			if (CheckActorFloorTexture(0, fluidtex_take[i])) GiveInventory("GimmeWater", 1); //ACS_NamedExecute("GimmeWater",0);
		}
	}
	
	if (CheckInventory("MetaHolyWaterPistol") && GetActorProperty (0, APROP_Waterlevel) >= 2 && CheckInventory("HolyWater") < 15)
	{
		GiveInventory("GimmeWater", 1); //ACS_NamedExecute("GimmeWater",0);
	}
	delay(35);
	restart;
}

////////////////////////////////////////////////////////////////////////////////
// Fire Extinguisher
////////////////////////////////////////////////////////////////////////////////

// Governs some stuff relating to extinguishing yourself.
Script "FireSelfSpray_Control" (void)
{
	LocalAmbientSound("*ext1", 127);
	FadeTo (255, 255, 255, 0.1, 0.1);
	GiveInventory("FireExtinguished",1);
	delay(175);
	LocalAmbientSound("*ext2", 127);
	TakeInventory("FireExtinguished",999);
	FadeTo (255, 255, 255, 0.0, 0.1);
}

// Extinguish being extinguished on map start, to fix the player becoming permanently
// cloaked from Arch-Vile harassment if they were extinguished on map change.
Script "StripExtinguishedOnStart" ENTER
{
	TakeInventory("FireExtinguished",999);
}

////////////////////////////////////////////////////////////////////////////////
// The Soulcube
////////////////////////////////////////////////////////////////////////////////

// Much like the low-health warning, this handles the message that pops up when
// the Soul Cube is ready to scythe some fuckers.
Script "SoulCubeMsg_Warn" ENTER
{
	if (CheckInventory("MetaCheatDetector"))
	{
		GiveInventory("SoulCubeMessagePopped", 1);
	}
	
	if (CheckInventory("SoulAmmo") == 10 && !CheckInventory("SoulCubeMessagePopped") && !CheckInventory("MetaCheatDetector"))
	{
		LocalAmbientSound("weapons/soulcube/ready", 127);
		GiveInventory("SoulCubeMessagePopped", 1);
		SetHudSize(320,200,1);
		SetFont("SmallFont");
		HudMessage(l:"SOULCUBEREADY"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 155.0, 1.0, 0.01, 1.0);
		delay(1);
		HudMessage(l:"SOULCUBEREADY"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 145.0, 1.0, 0.01, 1.0);
		delay(1);
		HudMessage(l:"SOULCUBEREADY"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 153.0, 1.0, 0.01, 1.0);
		delay(1);
		HudMessage(l:"SOULCUBEREADY"; HUDMSG_FADEINOUT, 99, CR_RED, 160.0, 150.0, 1.0, 0.01, 1.0);
	}
	delay(1);
	restart;
}

// As ever, make the player qualify to see the message again once the cube is unleashed.
Script "SoulCubeMsg_Clear" ENTER
{
	if (CheckInventory("SoulAmmo") != 10 && CheckInventory("SoulCubeMessagePopped"))
	{
		TakeInventory("SoulCubeMessagePopped", 999);
	}
	delay(1);
	restart;
}

////////////////////////////////////////////////////////////////////////////////
// Item Variety System
////////////////////////////////////////////////////////////////////////////////

// Make every player checkable. This is definitely gonna have to be changed once
// we move it over to ZScript... Gross.
script "Item_Init" ENTER
{
	Thing_ChangeTID(0,1337+PlayerNumber());	
}

// Check if any player owns one of the following weapons, for the item checkers
// to use as an excuse to display new weapons. This can almost certainly be done
// better with a ThinkerIterator nowadays...
script "Item_Shotgun" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaShotgun"))
		{
			if(GetCvar("meta_developer"))
			log(s:"ACS: Someone has a Shotgun! Alternate weapon drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_SuperShotgun" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaSuperShotgun"))
		{
			if(GetCvar("meta_developer"))
			log(s:"ACS: Someone has a SSG! Alternate weapon drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_RocketLauncher" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaRocketLauncher"))
		{
			if(GetCvar("meta_developer"))
			log(s:"ACS: Someone has a Rocket Launcher! Alternate weapon drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_Machinegun" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaMachinegun"))
		{
			if(GetCvar("meta_developer"))
			log(s:"ACS: Someone has a Machinegun! Alternate weapon drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_PlasmaRifle" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaPlasmaRifle"))
		{
			if(GetCvar("meta_developer"))
			log(s:"ACS: Someone has a Plasma Rifle! Alternate weapon drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_BFG9000" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"PlayingDoom64"))
		{
			if(GetCvar("meta_developer"))
			log(s:"ACS: Playing Doom 64. Alternate BFG Item Drops Disabled.");
			
			SetResultValue(1);
			break;
		}
		
		if(CheckActorInventory(i,"MetaBFG9000"))
		{
			if(GetCvar("meta_developer"))
			log(s:"ACS: Someone has a BFG9000! Alternate weapon drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_Unmaker" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaUnmaker"))
		{
			if(GetCvar("meta_developer"))
			log(s:"ACS: Someone has an Unmaker! Demon Key drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

script "Item_SoulCube" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"MetaSoulCube"))
		{
			if(GetCvar("meta_developer"))
			log(s:"ACS: Someone has a SoulCube! SoulAmmo drops enabled.");
			
			SetResultValue(2);
			break;
		}
	}
}

// There can only be one.
script "Item_Artifact" (void)
{
	for(int i = 1337; i < 1400; i++)
	{
		if(CheckActorInventory(i,"Artifact"))
		{
			if(GetCvar("meta_developer"))
			log(s:"ACS: Someone has an Artifact! Artifact drops DISABLED.");
			
			SetResultValue(2);
			break;
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
// Monster Variety System
////////////////////////////////////////////////////////////////////////////////

// Allow monster spawners to detect whether they're in an episode or a full game,
// to better pace out the introduction of new "elements". Debug texts are moved
// to a seperate script at the bottom of the page.
script "Item_GameDetector" (void)
{
	str maplump = StrParam(n:PRINTNAME_LEVEL);
	
	if (StrCmp(StrLeft(maplump, 2), "E1") == 0
	| StrCmp(StrLeft(maplump, 2), "E2") == 0
	| StrCmp(StrLeft(maplump, 2), "E3") == 0
	| StrCmp(StrLeft(maplump, 2), "E4") == 0 
	| StrCmp(StrLeft(maplump, 2), "E5") == 0
	| StrCmp(StrLeft(maplump, 2), "E6") == 0
	| StrCmp(StrLeft(maplump, 2), "E7") == 0
	| StrCmp(StrLeft(maplump, 2), "E8") == 0
	| StrCmp(StrLeft(maplump, 2), "E9") == 0)
	{
		// Doom 1 Episodic
		SetResultValue(2);
	}
	else if (StrCmp(StrLeft(maplump, 5), "LEVEL") == 0 | StrCmp(StrLeft(maplump, 3), "NV_") == 0 )
	{
		// Doom 2 Episodic
		SetResultValue(3);
	}
	else
	{
		// Doom 2 Normal
		SetResultValue(1);
	}
}

// Tick up a number as you clear maps, so monster spawners can introduce new threats
// as you clear more and more maps.
script "Monster_Init" ENTER
{
	mapsCleared++;
	
	if(GetCvar("meta_developer"))
			log(s:"Mapclear Count: ", i:mapsCleared);
}

// This is how they check it. Don't uncomment the debug log if you don't want
// a ton of useless console spam.
script "Monster_ReturnMaps" (void)
{
	//if(GetCvar("meta_developer"))
	//		log(s:"ACS: ", n:0, s:" is checking the mapclear count... (", i:mapsCleared, s:")");
			
	SetResultValue(mapsCleared);
}

////////////////////////////////////////////////////////////////////////////////
// Keycard Variety System
////////////////////////////////////////////////////////////////////////////////

// Decide what skins the keycards and skull keys are going to be using in this
// map. This is to ensure all keys use the same skin for consistency.
script "Key_Init" OPEN
{
	item_KeyType = random(1,5);
	item_SkullKeyType = random(1,3);
	
	if(GetCvar("meta_developer"))
	{
		log(s:"Keycard Skin: ", i:item_KeyType);
		log(s:"Skullkey Skin: ", i:item_SkullKeyType);
	}
}

// And these are how they check it.
script "Key_ReturnType" (void)
{
	SetResultValue(item_KeyType);
}

script "SkullKey_ReturnType" (void)
{
	SetResultValue(item_SkullKeyType);
}

////////////////////////////////////////////////////////////////////////////////
// Inventory Fixer System
////////////////////////////////////////////////////////////////////////////////

// If the player is given an old vanilla weapon by a map script, fuck it off and
// give them one of the new ones.
script "PlayerInventoryFixer" ENTER
{
	if (CheckInventory("Chainsaw") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"ACS: Old Chainsaw detected! Replacing with new one");
		
		TakeInventory("Chainsaw",1);
		GiveInventory("MetaChainsaw",1);
		SetWeapon("MetaChainsaw");
	}
	if (CheckInventory("Shotgun") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"ACS: Old Shotgun detected! Replacing with new one");
		
		TakeInventory("Shotgun",1);
		GiveInventory("MetaShotgun",1);
		SetWeapon("MetaShotgun");
	}
	if (CheckInventory("SuperShotgun") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"ACS: Old SSG detected! Replacing with new one");
		
		TakeInventory("SuperShotgun",1);
		GiveInventory("MetaSuperShotgun",1);
		SetWeapon("MetaSuperShotgun");
	}
	if (CheckInventory("Chaingun") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"ACS: Old Chaingun detected! Replacing with Machinegun");
		
		TakeInventory("Chaingun",1);
		GiveInventory("MetaMachineGun",1);
		SetWeapon("MetaMachineGun");
	}
	if (CheckInventory("RocketLauncher") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"ACS: Old Rocket Launcher detected! Replacing with new one");
		
		TakeInventory("RocketLauncher",1);
		GiveInventory("MetaRocketLauncher",1);
		SetWeapon("MetaRocketLauncher");
	}
	if (CheckInventory("PlasmaRifle") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"ACS: Old Plasma Rifle detected! Replacing with new one");
				
		TakeInventory("PlasmaRifle",1);
		GiveInventory("MetaPlasmaRifle",1);
		SetWeapon("MetaRocketLauncher");
	}
	if (CheckInventory("BFG9000") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"ACS: Old BFG detected! Replacing with new one");
		
		TakeInventory("BFG9000",1);
		GiveInventory("MetaBFG9000",1);
		SetWeapon("MetaBFG9000");
	}
	
	// If the player has no weapon and isn't in the titlemap or an ironman game
	// over screen, give them a way to defend themselves...
	if (CheckInventory("MetaPistol") == 0
	&& CheckInventory("MetaLastResortFist") == 0
	&& GameType() != GAME_TITLE_MAP
	&& StrCmp(StrLeft(StrParam(n:PRINTNAME_LEVEL), 4), "DEAD") != 0)
	{
		if(GetCvar("meta_developer"))
			log(s:"ACS: Player has no Pistol! Giving them some means of defending themselves...");
		GiveInventory("MetaLastResortFist",1);
	}
	
	if (CheckInventory("MetaPistol") == 1  && CheckInventory("MetaLastResortFist") == 1)
	{
		if(GetCvar("meta_developer"))
			log(s:"ACS: Player has a Pistol! No need for the Last Resort anymore.");
		TakeInventory("MetaLastResortFist",1);
	}
	
	// Give Doom 64 Demon Key IDs in Doom 64
	if (CheckInventory("PlayingDoom64") == 1)
	{
		if (CheckInventory("DemonKey") == 1 && CheckInventory("UnmakerUpgrade1Icon") == 0)
		{		
			if(GetCvar("meta_developer"))
				log(s:"ACS: Giving D64 Demon Key Token 1!");
				
			GiveInventory("UnmakerUpgrade1Icon",1);
		}
		
		if (CheckInventory("DemonKey") == 2 && CheckInventory("UnmakerUpgrade2Icon") == 0)
		{		
			if(GetCvar("meta_developer"))
				log(s:"ACS: Giving D64 Demon Key Token 2!");
				
			GiveInventory("UnmakerUpgrade2Icon",1);
		}
		
		if (CheckInventory("DemonKey") == 3 && CheckInventory("UnmakerUpgrade3Icon") == 0)
		{		
			if(GetCvar("meta_developer"))
				log(s:"ACS: Giving D64 Demon Key Token 3!");
				
			GiveInventory("UnmakerUpgrade3Icon",1);
		}
	}

	delay(1);
	restart;
}

////////////////////////////////////////////////////////////////////////////////
// Cheaty Cheater Stuff
////////////////////////////////////////////////////////////////////////////////

// Give IDKFA users all of the Inventory Items, for convenience's sake
script "InventoryCheat" ENTER
{
	if (CheckInventory("MetaCheatDetector") == 1)
	{
		GiveInventory("HandGrenade", 1);
		GiveInventory("TeslaRocket", 1);
		GiveInventory("Shieldwall", 1);
		GiveInventory("SiphonGrenade", 1);
		GiveInventory("DogCollar", 1);
		GiveInventory("Hologram", 1);
		GiveInventory("KineticMine", 1);
		GiveInventory("Artifact", 1);
		GiveInventory("DemonKeyCheat", 3);
		GiveInventory("MetaCodex_DebugTheCodex", 1);
		
		SetActorProperty(0,APROP_Score,0);
		delay(1);
		TakeInventory("MetaCheatDetector", 1);
	}
	
	delay(1);
	restart;
}

// The new console cheats! Oh boy, what dumb bullshit will I disappoint my
// ancestors with this time?!
Script "Impulse" (int n)
{
	int i;
	AmbientSound("umpulse/default",127); // HENH HEEEEEEEEH
	
	if (GetCVar("sv_cheats") | GameSkill() >= 4)
	{
		log(s:"You're too good to be cheating!");
	} else {
		if (n == 35) // Micro-Rocket Placeholder Mode
		{
			if (CheckInventory("MachinegunCheat") == 0)
			{
				AmbientSound("weapons/machinegun/rackout",127);
				log(s:"Micro-Rocket Placeholder Mode On");
				GiveInventory("MachinegunCheat", 1);
			} else {
				AmbientSound("weapons/machinegun/rackin",127);
				log(s:"Micro-Rocket Placeholder Mode Off");
				TakeInventory("MachinegunCheat", 1);
			}
		} else if (n == 2004) // Doom 3 Mode
		{
			log(s:"More like Doom 3 Doom, am I right?");
			AmbientSound("cheats/doom3",127);
			for (i = 0; i < 65535; i++)
			{
				//Log(d:i, s:": ", d:GetSectorLightLevel(i));
				if (GetSectorLightLevel(i) > 0)
				{
					Light_ChangeToValue(i, 0);
					Sector_SetFade(i, 0,0,0);
					Light_Stop(i);
				}
	 
				if (i % 10000 == 10000-1) { Delay(1); }
			}
		} else if (n == 16) // SNES Mode
		{
			log(s:"Powered by the Super FX Chip!");
			AmbientSound("cheats/snes",127);
			for (i = 0; i < 65535; i++)
			{
				Sector_SetFloorScale(i,99999,0,99999,0);
				Sector_SetCeilingScale(i,99999,0,99999,0);
	 
				if (i % 10000 == 10000-1) { Delay(1); }
			}
		} else if (n == 420) // Hotbox
		{
			log(s:"Well this was obvious.");
			AmbientSound("cheats/420",127);
			GiveInventory("FireExtinguisherCheat", 1);
		} else {
			log(s:"Bzzzt! Thank you for playing.");
			Thing_Damage(0,9999,MOD_EXIT);
		}
	}
}

// Remove death animation inventory tokens to fix player weapon animations after
// they use the resurrect cheat.
script "MetaResurrectChecker" DEATH
{
	if (GameType() == GAME_SINGLE_PLAYER && !(ClassifyActor(0) & ACTOR_VOODOODOLL))
	{
		while(true)
		{
		if (GetActorProperty(0,APROP_Health) > 0)
		{
			TakeInventory("DeathStateFallingDown", 999);
			TakeInventory("DeathStateSpeedyDrop", 999);
			TakeInventory("DeathStateExplosion", 999);
			TakeInventory("DeathStateFire", 999);
			TakeInventory("DeathStateElec", 999);
			TakeInventory("DeathStateGibbed", 999);
			Log(s:"Oh. Okay. You aren't dead, then.");
			break;
		}
		delay(1);
		}
	}
}

////////////////////////////////////////////////////////////////////////////////
// Miscellaney
////////////////////////////////////////////////////////////////////////////////

// Don't get too brutal, kid...
function int unusedTID(int start, int end)
{
    int ret = start - 1;
    int tidNum;

    if (start > end) { start ^= end; end ^= start; start ^= end; }  // good ol' XOR swap
    
    while (ret++ != end)
    {
        if (ThingCount(0, ret) == 0)
        {
            return ret;
        }
    }
    
    return -1;
}

script "BrutalChecker" ENTER
{
    int s = unusedTID(37000, 47000);

    if (SpawnForced("Brutal_Blood",0,0,0,s,0))
	{
		SetFont("BIGFONT");
		HudMessage(s:"Hello! You seem to have Brutal Doom\n
		loaded at the same time as MetaDoom.\n
		This will cause bugs and glitches.\n
		Please Understand.";
		HUDMSG_TYPEON | HUDMSG_LOG, 0, CR_TAN, 1.5, 0.8, 5.0,
		0.05, 2.0);
    }
}

// Debug Message for the map type.
script "DebugLog_GameDetector" OPEN
{
	if(GetCvar("meta_developer"))
	{
		str maplump = StrParam(n:PRINTNAME_LEVEL);
		
		if (StrCmp(StrLeft(maplump, 2), "E1") == 0
		| StrCmp(StrLeft(maplump, 2), "E2") == 0
		| StrCmp(StrLeft(maplump, 2), "E3") == 0
		| StrCmp(StrLeft(maplump, 2), "E4") == 0 
		| StrCmp(StrLeft(maplump, 2), "E5") == 0
		| StrCmp(StrLeft(maplump, 2), "E6") == 0
		| StrCmp(StrLeft(maplump, 2), "E7") == 0
		| StrCmp(StrLeft(maplump, 2), "E8") == 0
		| StrCmp(StrLeft(maplump, 2), "E9") == 0)
		{
				log(s:"Map Type: Doom 1 Episodic");
		}
		else if (StrCmp(StrLeft(maplump, 5), "LEVEL") == 0 | StrCmp(StrLeft(maplump, 3), "NV_") == 0 )
		{
				log(s:"Map Type: Doom 2 Episodic");
		}
		else if (StrCmp(StrLeft(maplump, 8), "TITLEMAP") == 0)
		{
				log(s:"Map Type: Title Screen");
		}
		else if (StrCmp(StrLeft(maplump, 4), "DEAD") == 0)
		{
				log(s:"Map Type: Ironman Game Over");
		}
		else
		{
				log(s:"Map Type: Doom 2... probably");
		}
	}
}